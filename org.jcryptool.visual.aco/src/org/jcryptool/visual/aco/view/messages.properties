Func_allSteps=All steps with one click
Func_alpha=Alpha:
Func_analyseCreated=Analyze a created ciphertext
Func_analyseGiven=Analyze a given ciphertext
Func_analysis=Insert ciphertext
Func_animation=Animation
Func_antAnalysis=Ant controller
Func_analysisType=Level of detail
Func_beta=Beta:
Func_cycle=Until last knot
Func_doWithNewAnt=Send new ants
Func_encryption=Generate ciphertext
Func_possibleInputs=Text input possibilities
Func_textLanguage=Language of text
Func_error=Error while loading the ACO Plug-in\!
Func_evap=Evaporation:
Func_initial_plaintext=This is the correct text
Func_keyLength=Estimated key length
Func_newAnt=Place new ant
Func_permutation=Permutation:
Func_plaintext=Plaintext:
Func_ciphertext=insert ciphertext directly
Func_general=General
Func_keytext=Key:
Func_oneStep=Knot-by-knot
Func_proceed=Proceed
Func_proceedToAnalysis=Start analysis
Func_stopAnalysis=Stop analysis
Func_reset=Reset
Func_settings=Algorithm settings
Func_analyseConfiguration=Configuration
Func_analyseGroupLabel=Analysis
Func_step=To next knot
Info_description1=This visualization demonstrates, how to anaylse a simple transposition encryption (permutations chiffre) and break the encryption by the ant colony optimization.\n\For the analysis a given ciphertext can be used or a new text can be generated from a plaintext. For this generation the plaintext will be put in a matrix whose number of columns equal to the chosen length of key for the transposition. If the plaintext length is not a dividable by the key length, e.g. the last cells of the matrix will remain empty, random characters will be placed in those cells. Finally the chiper text is extracted column wise which respect to the chosen permutation.\n\nIf a key length between 3 and 5 was chosen, the analysis will be demonstrated in a graph.
Info_description2=Now we move on to the cryptanalysis.\n\nBased on the key length first the columns of the encryption matrix are reconstructed. Herefrom a graph is build where every knot corresponds to a column of the matrix.\nThe key length can be investigated by statistical tests. In contrast to that the determination of the right order of the columns is the difficult part of the cryptanalysis. This is where the Ant Colony Optimization comes into play. At first an ant is placed randomly on one knot of the graph.
Info_description3=Every trail through the graph including every knot exactly one time corresponds to a possible decryption as one may reconstruct the encryption matrix by concatenating the columns in the order the corresponding knots were passed in the trail and then read out the plaintext line by line.\n\nThe probability with which an ant chooses a certain not yet passed knot to be the next one in the trail depends on two measures./n/n First the bigrams that occur by concatenating the last column with the possible next columns are examined and compared to ordinary bigrams that occur in texts of natural languages.\nE.g. if an ant is located at a column starting with a Q a column starting with a U gets a higher probability to be the next in the trail than one starting with a X since the combination QU is much more frequent in natural languages than the combination QX.\n\nIn addition to that certain values are assigned to all edges of the graph. These values are all equal at the beginning and change after an ant has finished its trail through the graph. Based on the analogy to real ants these values are called pheromone values.\nBy using the Sliders Alpha (pheromone) and Beta (bigrams) one can determine the influence the two measures should have on the choice of the ant.\n\n
Info_description4=As soon as an ant has finished its trail through the graph the resulting solution will be evaluated. Therefore the derived plaintext is compared to a wordlist containing common words of a natural language (depending on the selected language) with at least three letters. The length of the words found in the possible decryption are squared, summed up and divided by the length of the text.\nThe resulting value is added to the pheromone values that correspond to the edges that build up the trail which led to the decryption. Apart from that a reduction of all pheromone values takes place. This corresponds to a evaporation process in the natural role model. This parameter can also be modified by a slider on the left side of the tutorial. In order to observe how the pheromone values develop over several iterations of the algorithm one can now send out more ants.
Show_decryptedBestKnown=Best known decryption:
Show_decryptedByAnt1=Number of ants sent so far:
Show_encryptedText=Encrypted text:
Show_encryptionKey=The key found is the decryption key\nThe corresponding encryption key would be:
Show_permutationMatrix=Permutationmatrix
Show_pheromoneMatrix=Pheromone matrix
Show_wrongInputTextSize = The ciphertext has to be dividable by the length of the key.
Description_title=Manual
Description_tooltip=Further information
Func_radioCompleteRound=Multiple iterations
Control_language1=English
Control_language2 = German
Control_language_own = Load list of words from file
Control_language1_short = en
Control_language2_short = de
Analysis_multipleCycles = Number of ants
Control_generateText = Generate ciphertext
Visual_graphVisualRadio = Visualization as graph
Visual_matrixVisualRadio = Show pheromone matrix
Header_title = Ant Colony Optimization (ACO)
Header_text = This visuals shows how it is possible to decrypt a text, which has previously been encrypted by a permutation cipher. \nFor the decryption a graph will be generated. The number of vertices of the graph corresponds to the length of the key which was used by the encryption. Then, the letters of the ciphertext will be assigned to \nthe knots in the graph. Randomly a vertex of the graph will be chosen, marked as visited and transition probabilities \u2012 based on local information \u2012 to unvisited knots will be calculated. Based on the calculated \nprobabilities, an unvisited vertex in the graph will be picked and this iteration will be repeated until all knots are marked as visited.The chosen knots represent a path in the graph. By concatenating the letters \nalong the path, a possible plaintext is formed.\nIn each iteration a candidate for the plaintext is generated, by repeating the steps a lot of time the real plaintext will most likely be the candidate with the highest probability.\nAs for the calculation of the transition probabilities local information and especially information about previously token paths \u2012 similar to the orientation of ants \u2012 will be taken into account,\nthe algorithm is called the Ant Colony Optimization.
PherMatrix_knotContent = Characters in knots
Result_currTrailLbl = Key of decryption
graph_probHintLbl = The percentage values next to the knots represent the \ntransition probability from the current visited knot to the appropriate knot.
Control_or=or
Control_textLength=Length of ciphertext:
Control_wrongInputToolTip=Only uppercase characters from A-Z are allowed.\nAll other characters will be ignored, lowercases will be converted.
Viusal_ResultGroup = Result
Visual_GraphMatrixGroupTitle = Visualization
Viusal_CurrAntGroup = Current decryption
Result_currEncryptionLbl = Decrypted plaintext of current ant
Result_bestEncryptionLbl = Best found plaintext
Viusal_BestAntGroup = Best known decryption
Result_emptyText1 = This component will later hold
Result_emptyText2 = the result of the algorithm.
PherMatrix_knotContent = Letters in vertices of the graph
PherMatrix_description = The entries in the pheromone matrix represent weights of edges\nin the graph.
Analysis_newAntButtonToolTip = By clicking on \u201DTo next knot\u201D or \n\u201DUntil last knot\u201D, the new ant can be send again.
Result_description = The possible plaintext is extracted of the graph by \nconcatenating the letters in the knots along the \npath the ant took.\n\nThe path corresponds to the key of the decryption, \neach number represents the knot in the graph. 
Desc_configComp_left = In this step a ciphertext to analyse has to be chosen.\nThe text can be inserted directly or generated by the wizard \u201DGenerate ciphertext\u201D from a plaintext.  \n\n  \u2022 Estimated key length n  [n \u2208 \u2115; 3 \u2264 n \u2264 9]:\n    \u2012 Length of the key, which was used for the encryption. \n    \u2012 Corresponds to the number of vertices in the graph.
Desc_configComp_right = \u2022 Language of text:\n    \u2012 For the the analysis bigrams of letters with its probabilities will be considered.\n       The probabilities depend on a language, this language can be chosen here.\n\n\u2022 Start analysis:\n    \u2012 As soon as the ciphertext length is larger than the key length, this button will be active.
Desc_analysisComp_left = \u2022 Knot-by-knot [active for key length n: 3 \u2264 n \u2264 5]:\n    \u2012 The progress of an ant in the graph can be inspected knot-by-knot.\n\n\u2022 Multiple iteration [automatically active for key length n: 6 \u2264 n \u2264 9]:\n    \u2012 Multiple ants can be sent at once.\n\n\u2022 Animation [active for key length n: 3 \u2264 n \u2264 5]:\n    \u2012 Activates animations.
Desc_analysisComp_right = \u2022 To next knot:\n    \u2012 The current path of the ant will be extended to a random knot which yet has not been visited.\n\n\u2022 Until last knot:\n    \u2012 The ant continues its way through the path until each knot is marked as visited.\n\n\u2022 Place new ant [active as soon as an ant has finished its path]:\n    \u2012 A ant will be placed on a new knot and a new path (new decryption) will be started.
Desc_analysisCompMulti_right = \u2022 Send new ants:\n    \u2012 Starts a new iteration by sending the chosen amount of ants.\n\n\u2022 Number of ants:\n    \u2012 Determines the number of ants which will be sent.
Desc_analysisAlgoSett_left = In the group Algorithm settings parameters for the algorithm can be chosen.\nThose adjust the transition probabilities from knot to knot and influence the convergence of the method.  \n\n  \u2022 Alpha  [x \u2208 [0,1]]:\n    \u2012  On each iteration an ant drops a pheromon on the passed edges.\n        Following ant are influenced by the pheromon and will most likely chose edges with a higher value\n        of pheromon. Alpha determines the influence of the pheromon have over the ants.  
Desc_analysisAlgoSett_right = \u2022 Beta  [x \u2208 [0,1]]:\n    \u2012  This parameter adjusts the weight of the probabilities of the bigrams of letters which arise\n        along the edges. By choosing a big parameter, the ant will chose a path where the bigrams of\n        letters in the chosen language are more likely.\n\n  \u2022 Evaporation  [x \u2208 [0,1]]:\n    \u2012  A small value means, that more following ants will notice the pheromon dropped on the edges\n        by the current ant.
Control_noVisualAvailable = If the length of key is greater than 5, the option \u201DVisualization as graph\u201D is not active. \nOnly the pheromon matrix can be displayed.