#Eclipse modern messages class
#Mon Sep 22 23:21:52 CEST 2014
BabystepGiantstepView_0=Shanks Babystep-Giantstep-Algorithmus
BabystepGiantstepView_2=In dieser Visualisierung von Shanks Babystep-Giantstep-Algorithmus geht es um das Problem, diskrete Logarithmen zu berechnen. Wir wollen den diskreten Logaritmus von a zur Basis g in (Z/pZ)* berechnen. Sei (Z/pZ)* eine endliche zyklische Gruppe der Ordnung phi(p) \:\= n und sei g ein Erzeuger dieser Gruppe mit neutralem Element 1 in (Z/pZ)*. Ferner sei a ein Gruppenelement. Gesucht ist die kleinste nicht negative ganze Zahl x, f\u00FCr die gilt\: a \= g ^ x mod p.
BabystepGiantstepView_25=In Schritt 2 berechnen wir die Gruppenordnung und die obere Schranke der Gruppenordnung. Wir nutzen die obere Schranke f\u00FCr die Berechnung der Baby- und Giantsteps. Das multiplikative Inverse des Erzeugers in mod p brauchen wir f\u00FCr die Berechnung der Babysteps im n\u00E4chsten Schritt. Wir machen den Ansatz x \= q * m + r, 0 <\= r < m, dabei ist r der Rest und q ist der Quotient der Division von x durch m. 
BabystepGiantstepView_26=Weiter zu Schritt 2
BabystepGiantstepView_27=Schritt 2
BabystepGiantstepView_28=Gruppenordnung (n)\:
BabystepGiantstepView_29=Obere Schranke\: m \= \u23BE \u221A(n) \u23CB\:
BabystepGiantstepView_3=Schritt 1 - Eingabe der Parameter
BabystepGiantstepView_30=Multiplikative Inverse (Inv)\:
BabystepGiantstepView_4=Eingabe der zyklischen Gruppe (p \u2208 Prim, p > 1)\:
BabystepGiantstepView_41=Der Babystep-Giantstep-Algorithmus berechnet q und r. Daf\u00FCr benutzen wir x \= q * m + r und setzen es in die Gleichung a \= g ^ x \= g ^ (q * m + r) ein. Daraus folgt a * g ^ - r \= (g ^ m) ^ q. Wir berechnen zuerst die Menge der Babysteps B \= {(r, a * g ^ - r)\: 0 <\= r < m}.
BabystepGiantstepView_42=Der Babystep-Giantstep-Algorithmus berechnet q und r. Daf\u00FCr benutzen wir x \= q * m + r und setzen es in die Gleichung a \= g ^ x \= g ^ (q * m + r) ein. Daraus folgt a * g ^ - r \= (g ^ m) ^ q. Wir berechnen zuerst die Menge der Babysteps B \= {(r, a * g ^ - r)\: 0 <\= r < m}. Falls wir ein Paar (r, 1) finden, so k\u00F6nnen wir x \= r setzen, und haben damit das DL-Problem gel\u00F6st.
BabystepGiantstepView_43=Weiter zu Schritt 3
BabystepGiantstepView_44=Schritt 3 - Berechnung der Babysteps
BabystepGiantstepView_47=Details zur Berechnung
BabystepGiantstepView_5=Eingabe des Erzeugers (g > 1)\:
BabystepGiantstepView_6=Eingabe des Gruppenelements (a > 1)\:
BabystepGiantstepView_64=In Schritt 4 berechnen wir die Giantsteps, indem wir d \= g ^ m setzen und pr\u00FCfen, ob f\u00FCr q \= 1, 2, 3,... das Gruppenelement d ^ q als zweite Komponente eines Elementes von B vorkommt, ob also ein Paar (r, d ^ q) zu B geh\u00F6rt. Sobald dies der Fall ist, gilt a * g ^ - r \= d ^ q \= g ^ (q * m), und das DL-Problem ist gel\u00F6st.
BabystepGiantstepView_65=Weiter zu Schritt 4
BabystepGiantstepView_66=Schritt 4 - Berechnung der Giantsteps
BabystepGiantstepView_69=Details zur Berechnung
BabystepGiantstepView_7=Auf Grund der Gr\u00F6\u00DFe der zyklischen Gruppe und der dadurch steigenden Laufzeit wird die tabellarische Darstellung deaktiviert.
BabystepGiantstepView_75=Wir haben einen der Giantstepwerte in der Babystep-Menge als zweite Komponente des Paars (r, d ^ q) gefunden und finden somit den diskreten Logarithmus 
BabystepGiantstepView_76=Dieser erf\u00FCllt die Gleichung\: a \= g ^ x mod p, in diesem Beispiel\: 
BabystepGiantstepView_88=Es wurde kein Paar (r, d ^ q) in B gefunden, daher konnte f\u00FCr die eingegebenen Parameter keine L\u00F6sung des diskreten Logarithmus berechnet werden.
BabystepGiantstepView_90=Ergebnis anzeigen
BabystepGiantstepView_93=Berechnungen zur\u00FCcksetzen
BabystepGiantstepView_94=Ergebnis
BabystepGiantstepView_95=Es gibt kein multiplikatives Inverse von 
BabystepGiantstepView_96=in der zyklischen Gruppe
BabystepGiantstepView_97=.Bitte verwenden Sie andere Eingabeparameter.
Parameter_0=Bitte nur nat\u00fcliche Zahlen verwenden. Das Gruppenelement darf\nkein Vielfaches der zyklischen Gruppe sein und umgekehrt.
Parameter_1=Parameter-Verifizierung
Parameter_2=Abbrechen
Parameter_3=N\u00E4chste Primzahl
