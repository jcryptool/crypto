SslViewLblClient=Client
SslViewLblServer=Server
SslViewLblInfo=Erkl\u00E4rung
SslViewBtnPreviousStep=Vorhergehender Schritt
SslViewBtnNextStep=N\u00E4chster Schritt
SslViewBtnReset=Neustart
SslViewStxInformation=Durch einen Klick auf den Button "Information" wird in diesem Fenster eine Erkl\u00E4rung zum aktuellen Schritt und dessen Parameter angezeigt. Durch einen erneuten Klick auf den Button kann man wieder auf die vorherige Anzeige zur\u00FCckschalten.\nDie Nachrichtenfenster sind in der Reihenfolge nummeriert, in der sie gesendet werden. So werden beispielsweise die ServerChangeCipherSpec- (5.) und die Finished-Nachricht (6.) direkt hintereinander gesendet, bevor der Client antwortet.\nDie durch einen Klick auf die jeweilige Cipher Suite ausgewählten Cipher Suites werden in dieser Informationsbox unter den ausgewählten Parametern angezeigt. Sollte eine Cipher Suite wieder abgewählt werden, so kann dies durch eine erneute Auswahl dieser Cipher Suite durchgeführt werden.\n
SslViewHeadline=SSL/TLS-Handshake
SslViewHeadlineInformation=Dieses Plugin dient zur graphischen Darstellung eines TLS-Handshakes. Dabei werden die gesendeten Nachrichten durch Pfeile zwischen Client und Server dargestellt.\nDie ausw\u00E4hlbaren Parameter beschreiben den Inhalt der Nachrichten, die zum Aufbau einer Verbindung ben\u00F6tigt werden.

btnInformationToggleParams=Parameter
stxInformationCipherSuitesExchanged=Die ausgew\u00E4hlten Cipher Suites wurden zusammen mit Versions ID, Session ID und dem Zufallswert an den Server \u00FCbertragen.\n\n
stxInformationSelectedCiphers=Schritt 1: Gew\u00E4hlte Parameter vom Client Hello\n\nVersion(en) und Cipher Suite(s):\n
stxInformationServerHello=Schritt 2: Gew\u00E4hlte Parameter vom Server Hello\n\n
stxInformationRandomValue=Zufallswert:\n
stxInformationTLS0=\nTLS1.0:\n
stxInformationTLS1=\nTLS 1.1:\n
stxInformationTLS2=\nTLS 1.2:\n
stxInformationCipherSuiteRefused1=Der Server schickt dem Client eine Nachricht, dass die Cipher Suite, die er verwenden will (
stxInformationCipherSuiteRefused2=) laut der ersten Nachricht des Clients, von diesem nicht angeboten wird. Damit ein Verbindungsaufbau m\u00F6glich ist, muss der Client die Cipher Suite anbieten, die der Server verwenden will.
certShowWindowName=Zertifikat

ClientHelloCompositeBtnGenerate=Generieren
ClientHelloCompositeBtnInformation=Informationen
ClientHelloCompositeGrpClientHello=1. Client Hello
ClientHelloCompositeLblCipherSuit=Cipher Suite
ClientHelloCompositeLblRandom=Zufallswert
ClientHelloCompositeLblSessionId=Session ID
ClientHelloCompositeLblSessionIdValue=0
ClientHelloCompositeLblVersion=Version
ClientHelloCompositeBtnNextStep=N\u00E4chster Schritt
ClientHelloInformationText=Schritt 1: Generelle Erkl\u00E4rung zum Client Hello\n\nIn diesem Schritt geht es darum, dass der Client auf sich aufmerksam macht und die ersten Verbindungsparameter \u00FCbermittelt.\n\nDabei w\u00E4hlt der Client die von ihm unterst\u00FCtzten SSL/TLS- Versionen sowie Cipher Suites aus, welche er f\u00FCr diese Kommunikation verwenden m\u00F6chte. Hierbei sind auch Mehrfachauswahlen m\u00F6glich. M\u00F6chte man eine ausgew\u00E4hlte Cipher Suite wieder abw\u00E4hlen, so kann man dies durch die erneute Auswahl der gleichen Cipher Suite durchf\u00FChren. Des Weiteren wird mit diesen Parametern der Handshake durchgef\u00FChrt. Falls der Server keine der vorgeschlagenen Optionen unterst\u00FCtzt, weist er das Query zur\u00FCck und der Client muss erneut Vorschl\u00E4ge senden.\n\nDer Zufallswert besteht aus 4 Byte Zeitstempel + 28 Byte Zufallszahl (32 Byte entspricht 64 Hexadezimalzeichen). Dies dient dem Replayschutz.\n\nDie Session ID ist bei jedem Verbindungsaufbau \u201E0\u201C und signalisiert damit, dass eine neue Verbindung aufgebaut werden soll. W\u00E4re der Wert ungleich \u201E0\u201C, so w\u00FCrden die Parameter einer bestehenden Verbindung verwendet und die Schritte 2 und 3 \u00FCbersprungen werden, dies darzustellen war jedoch nicht unser Ziel.

ServerHelloCompositeBtnGenerate=Generieren
ServerHelloCompositeBtnInfo=Informationen
ServerHelloCompositeGrpServerHello=2. Server Hello
ServerHelloCompositeLblCipherSuite=Cipher Suite
ServerHelloCompositeLblRandom=Zufallswert
ServerHelloCompositeLblSessionID=Session ID
ServerHelloCompositeLblVersion=Version
ServerHelloCompositeBtnNextStep=N\u00E4chster Schritt
ServerHelloCompositeError=Fehler
ServerHelloCompositeErrorSessionID=Es d\u00FCrfen sich nur hexadezimale Zahlen im Feld Session ID befinden!
ServerHelloCompositeErrorSessionIDLength=Die Eingabe im Feld Session ID darf h\u00F6chstens 64 Zeichen lang sein!
ServerHelloCompositeErrorSessionIDNull=Der eingegebene hexadezimale Wert im Feld Session ID darf nicht null sein!
ServerHelloCompositeErrorRandom=Es d\u00FCrfen sich nur hexadezimale Zahlen im Feld Random befinden!
ServerHelloCompositeErrorRandomShort=Die Eingabe im Feld Random muss 64 Zeichen lang sein!
ServerHelloInformationText=Schritt 2: Generelle Erkl\u00E4rung zum Server Hello\n\nIn diesem Schritt w\u00E4hlt der Server eine SSL/TLS- Version sowie eine Cipher Suite aus. Sollte diese SSL/TLS-Version bzw. Cipher Suite vom Client nicht unterst\u00FCtzt werden, sendet der Server eine Nachricht an den Client, dass mit diesen Einstellungen kein Verbindungsaufbau m\u00F6glich ist und der Client erneut eine Liste mit unterst\u00FCtzten SSL/TLS-Versionen und Cipher Suites senden muss.\n\nAuch der Server erzeugt sich einen eigenen Zufallswert. Dieser hat denselben Aufbau wie der des Clients, d.h. er besteht aus 4 Byte Zeitstempel + 28 Byte Zufallszahl (32 Byte entspricht 64 Hexadezimalzeichen).\n\nZuletzt wird die \u00FCbermittelte Session ID noch auf einen Wert ungleich \u201E0\u201C gesetzt, um sp\u00E4ter die durchgef\u00FChrten Handshakes den einzelnen Clients zuordnen zu k\u00F6nnen. Dieser Wert darf maximal 32 Byte gro\u00df sein.

ServerCertificateCompositeBtnInfo=Informationen
ServerCertificateCompositeBtnShow=Anzeigen
ServerCertificateCompositeLblCertificate=Server Certificate
ServerCertificateCompositeLblCertificateRequest=Server Certificate Request
ServerCertificateCompositeLblServerHelloDone=Server Hello Done
ServerCertificateCompositeLblServerKeyExchange=Server Key Exchange
ServerCertificateCompositeRdbNo=Nein
ServerCertificateCompositeRdbYes=Ja
ServerCertificateCompositeServerCertificate=3. Server Certificate
ServerCertificateCompositeBtnNextStep=N\u00E4chster Schritt
ServerCertificateCompositeInitationText=Schritt 3: Gew\u00E4hlte Parameter vom Server Certificate\n\nDer Server hat nun eine Cipher Suite f\u00FCr die SSL/TLS \u00DCbertragung ausgew\u00E4hlt:\n
ServerCertificateCompositeCertificateText=\n\nDer Server versendet ein Zertifikat an den Client, welches den gew\u00E4hlten \u00F6ffentlichen Schl\u00FCssel enth\u00E4lt und mit gew\u00E4hlter Signatur/Hash-Kombination signiert wird.\n
ServerCertificateCompositeKeyExchangeText=\nDer Server sendet nun seine \u00F6ffentlichen Informationen des Diffie-Hellman Schl\u00FCssel, um dem Client den Schl\u00FCsselaustausch zu erm\u00F6glichen.\n
ServerCertificateCompositeRequestText=\nAbschlie\u00dfend kann der Server noch ein Zertifikat von seinem Client anfordern.\n
ServerCertificateInformationText=Schritt 3: Generelle Erkl\u00E4rung zum Server Certificate\n\nIn diesem Schritt dreht sich alles um den Austausch von Zertifikaten, sowie die Schl\u00FCsselberechnung durch die zuvor festgelegten Parameter.\n\nDurch den \u201EAnzeigen\u201C Button kann man sich das Zertifikat des Servers anzeigen lassen.\n\nDurch die Auswahlm\u00F6glichkeiten beim Server Certificate Request legt man fest, ob ein Zertifikat des Client angefordert wird. Ist dies nicht der Fall, ist es auch nicht m\u00F6glich sich im n\u00E4chsten Schritt das Zertifikat des Client anzeigen zu lassen.\n\nDer Parameter Server_Key_Exchange teilt dem Client mit, dass zus\u00E4tzliche Schl\u00FCsselinformationen ben\u00F6tigt werden (bei Diffie-Hellman n\u00F6tig).\n\nMit Server_Hello_Done wird der 2. Schritt beendet.

ClientCertificateCompositeBtnInfo=Informationen
ClientCertificateCompositeBtnShow=Anzeigen
ClientCertificateCompositeGrpClientCertificate=4. Client Certificate 
ClientCertificateCompositeLblCertifcate=Client Certificate Request
ClientCertificateCompositeLblCertificateVerify=Certificate Verify
ClientCertificateCompositeLblClientKeyExchange=Client Key Exchange
ClientCertificateCompositeBtnNextStep=N\u00E4chster Schritt
ClientCertificateCompositeInitationText=Schritt 4: Gew\u00E4hlte Parameter vom Client Certificate\n\nNachdem der Server seine HelloDone Nachricht versendet hat folgt nun der Client.\n
ClientCertificateCompositeCertificateRequested=\n\nDa der Server ein Certificate Request gesendet hat muss der Client mit einem g\u00FCltigen Zertifikat antworten.\n
ClientCertificateCompositeKeyExchangeText=\nDer Client sendet immer eine KeyExchange Nachricht um sich auf das premaster secret zu einigen.\n
ClientCertificateCompositeKeyExchangeRSAText=Im Falle von RSA wird direkt RSA Geheimnis \u00FCbertragen.\nFolgender \u00F6ffentliche RSA Schl\u00FCssel wurde berechnet:\n
ClientCertificateCompositeKeyExchangeDHText=Im Falle von Diffie Hellman werden die n\u00F6tigen Parameter gesendet um sich auf ein gemeinsames Geheimnis zu einigen. Folgende \u00F6ffenliche Diffie Hellman Parameter wurden berechnet:\n
ClientCertificateCompositeVerifyText=\nEs wird eine CertificateVerify-Nachricht versendet um zu erfragen ob das gesendete Zertifikat vom Server akzeptiert wurde.\n
ClientCertificateCompositeDHSecret=\n\nNachdem der Client nun \u00FCber den \u00F6ffentlichen Schl\u00FCssel des Servers verf\u00FCgt und \u00FCber seinen privaten Schl\u00FCssel kann er sich das premaster Secret berechnen:\n
ClientCertificateCompositeRSASecret=\n\nDer Client bestimmt zuf\u00E4llig ein premaster Secret und verschl\u00FCsselt dieses mit dem \u00F6ffentlichen Schl\u00FCssel des Servers um dieses zu versenden:\n
ClientCertificateCompositeRSAEncrypt=\n\nDas verschl\u00FCsselte premaster Secret wird nun \u00FCbertragen:\n
ClientCertificateInformationText=Schritt 4: Generelle Erkl\u00E4rung zum Client Certificate\n\nIn diesem Schritt wird, sofern angefordert, das Zertifikat des Client erzeugt sowie Schl\u00FCsselinformationen ausgetauscht.\n\nSofern im Schritt zuvor (Server Certificate) das Feld Server Certificate Request mit \u201EJa\u201C markiert wurde, kann man sich \u00FCber den \u201EAnzeigen\u201C-Button das Zertifikat des Client anzeigen lassen.\n\nDer Parameter Client_Key_Exchange verdeutlicht, dass Schl\u00FCsselmaterial ausgetauscht wird.\n\nIm Certificate_Verify versucht der Client das Zertifikat des Servers zu verifizieren. Wenn dies nicht m\u00F6glich ist, wird die Verbindung abgebrochen.

ServerChangeCipherSpecCompositeBtnInformation=Informationen
ServerChangeCipherSpecCompositeLblFinished=Fertig
ServerChangeCipherSpecCompositeLblServerChangeCipher=5. Server Change Cipher Spec
ServerChangeCipherSpecCompositeLblServerChangeCipherSpec=Change Cipher Spec
ServerChangeCipherSpecCompositeBtnNextStep=N\u00E4chster Schritt
ServerChangeCipherSpecInformationText=Schritt 5: Generelle Erkl\u00E4rung zum Server Change Cipher Spec\n\nVia Change_Cipher_Spec signalisiert der Server, dass er ab jetzt die neuen, zuvor festgelegten Schl\u00FCssel verwendet.
ServerChangeCipherSpecInitationText=Schritt 5: Parameter vom Server Change Cipher Spec\n\nDie ChangeCipherSpec-Nachricht enth\u00E4lt nur den Wert 1 und signalisiert damit, dass jegliche weitere Kommunikation unter der zuvor ausgew\u00E4hlten CipherSuite gesichert (verschl\u00FCsselt) stattfindet.\n
ServerChangeCipherSpecMasterSecret=\n\nF\u00FCr die Verschl\u00FCsselung wird aus dem premaster secret nun ein master secret berechnet:\n
ServerChangeCipherSpecServerMACsecret=\n\nAus diesem master secret werden jetzt die folgenden Schl\u00FCssel und Parameter vom Server berechnet:\n\nDer server write MAC key, der zur Authentifizierung von - vom Server gesendeten - Daten verwendet wird:\n
ServerChangeCipherSpecServerKey=\n\nDer server write key, mit dem die zu sendenden Daten vom Server verschl\u00FCsselt werden:\n
ServerChangeCipherSpecServerIV=\n\nDer server write IV, ein Inizialisierungsvektor der aktuell nur f\u00FCr implizite Authentifizierungsverschl\u00FCsselungen generiert wird:\n
ServerChangeCipherSpecNoIV=F\u00FCr die von Ihnen ausgew\u00E4hlte CipherSuite wird kein IV ben\u00F6tigt.
ServerChangeCipherSpecPreMaster=\nDer Server berechnet sich nun ebenfalls sein premaster secret:\n

ServerFinishedCompositeBtnInformation=Informationen
ServerFinishedCompositeLblFinished=Fertig
ServerFinishedCompositeGrpServerFinished=6. Server fertig
ServerFinishedInformationText=Schritt 6: Gernerelle Erkl\u00E4rung zum Server Finished\n\nServer Finished ist eine Nachricht, bestehend aus einem Hashwert \u00FCber alle vorhergehenden Nachrichten und erzeugten Schl\u00FCssel. Dies dient zum Vergleichen der berechneten Schl\u00FCssel.\n\nDiese Nachricht ist die erste Nachricht die mit den zuvor festgelegten Parametern verschl\u00FCsselt wird. Dies wird durch die grünen Pfeile dargestellt.
ServerFinishedInitationText=Schritt 6: Parameter vom Server Finished\n\nAlle bisher gesendeten Nachrichten werden in einem Hashwert zusammengefasst, zusammen mit dem master secret und der Nachricht "server finished" an eine Pseudorandom-Funktion \u00FCbergeben und das Ergebnis ist die Finished-Nachricht:\n

ClientChangeCipherSpecCompositeBtnInformation=Informationen
ClientChangeCipherSpecCompositeLblClientChangeCipher=7. Client Change Cipher Spec
ClientChangeCipherSpecCompositeLblClientChangeCipherSpec=Change Cipher Spec
ClientChangeCipherSpecCompositeLblFinished=Fertig
ClientChangeCipherSpecCompositeBtnNextStep=N\u00E4chster Schritt
ClientChangeCipherSpecInformationText=Schritt 7: Generelle Erkl\u00E4rung zum Client Change Cipher Spec\n\nVia Change_Cipher_Spec signalisiert der Server, dass er ab jetzt die neuen, zuvor festgelegten Schl\u00FCssel verwendet.
ClientChangeCipherSpecInitationText=Schritt 7: Parameter vom Client Change Cipher Spec\n\nDie ChangeCipherSpec-Nachricht enth\u00E4lt nur den Wert 1 und signalisiert damit, dass jegliche weitere Kommunikation unter der zuvor ausgew\u00E4hlten CipherSuite gesichert (verschl\u00FCsselt) stattfindet.
ClientChangeCipherSpecClientMACsecret=\n\nAus diesem master secret werden jetzt die folgenden Schl\u00FCssel und Parameter vom Client berechnet:\n\nDer client write MAC key, der zur Authentifizierung von - vom Client gesendeten - Daten verwendet wird:\n
ClientChangeCipherSpecClientKey=\n\nDer client write key, mit dem die zu sendenden Daten vom Client verschl\u00FCsselt werden:\n
ClientChangeCipherSpecClientIV=\n\nDer client write IV, ein Inizialisierungsvektor der aktuell nur f\u00FCr implizite Authentifizierungsverschl\u00FCsselungen generiert wird:\n
ClientChangeCipherSpecNoIV=F\u00FCr die von Ihnen ausgew\u00E4hlte CipherSuite wird kein IV ben\u00F6tigt.

ClientFinishedCompositeBtnInformation=Informationen
ClientFinishedCompositeGrpServerFinished=8. Client fertig
ClientFinishedCompositeLblFinished=Fertig
ClientFinishedInformationText=Schritt 8: Generelle Erkl\u00E4rung zum Client Finished\n\nClient Finished ist eine Nachricht, bestehend aus einem Hashwert \u00FCber alle vorhergehenden Nachrichten und erzeugten Schl\u00FCssel. Dies dient zum Vergleichen der berechneten Schl\u00FCssel.\n\nDiese Nachricht ist die erste Nachricht, die mit den zuvor festgelegten Parametern verschl\u00FCsselt wird. Dies wird durch die grünen Pfeile dargestellt.
ClientFinishedInitationText=Schritt 8: Parameter vom Client Finished\n\nAlle bisher gesendeten Nachrichten werden in einem Hashwert zusammengefasst, zusammen mit dem master secret und der Nachricht "client finished" an eine Pseudorandom-Funktion \u00FCbergeben und das Ergebnis ist die Finished-Nachricht:\n

AttacksCaution = Achtung!
AttacksProceed = \nTrotzdem fortsetzen?
AttacksSHA1=Sie haben eine unsichere Cipher Suite ausgew\u00E4hlt! \nDie Hashfunktion SHA1 ist nicht sicher - es existieren mehrere bekannte Angriffe auf diese Hashfunktion.
AttacksMD5=Sie haben eine unsichere Cipher Suite ausgew\u00E4hlt! \nMit MD5 erstellte Hashes k\u00F6nnen innerhalb k\u00FCrzester Zeit gebrochen werden!
AttacksBEAST=Sie haben eine unsichere Cipher Suite ausgew\u00E4hlt! \nTLS1.0 in Kombination mit CBC erm\u00F6glicht einen Angriff mit der sogenannnten BEAST-Attacke.
AttacksRC4=Sie haben eine unsichere Cipher Suite ausgew\u00E4hlt! \nEs gibt eine Reihe von Angriffen auf RC4. Die im Moment aktuellste ist eine Attacke von  AlFardan, Bernstein, Paterson, Poettering und Schuldt.
AttacksDES=Sie haben eine unsichere Cipher Suite ausgew\u00E4hlt! \nDer aktuelle Rekord beim Brechen (Brute-Force) von DES liegt bei unter einem Tag.
AttacksNoCipher=Sie haben eine unsichere Cipher Suite ausgew\u00E4hlt! \nSie haben keine Verschl\u00FCsselung ausgew\u00E4hlt, ihre Nachrichten werden im Klartext versendet!
AttacksLucky13=Sie haben eine unsichere Cipher Suite ausgew\u00E4hlt! \nTLS 1.0 bzw. TLS1.1 in Kombination mit CBC erm\u00F6glicht die sogenannte Lucky13 Attacke. Lucky13 ist eine Variante der Padding Oracle Attacke.
AttacksRSA=Sie haben eine unsichere Cipher Suite ausgew\u00E4hlt! \nSie haben RSA oder DH zur Schl\u00FCsselgenerierung gew\u00E4hlt somit ist keine Perfect Forward Secrecy gegeben, um diese zu erreichen muss ein DHE Verfahren verwendet werden.

Tls0=TLS 1.0
Tls1=TLS 1.1
Tls2=TLS 1.2

TLS0_RSA_WITH_NULL_MD5=TLS_RSA_WITH_NULL_MD5
TLS0_RSA_WITH_NULL_SHA =TLS_RSA_WITH_NULL_SHA
TLS0_RSA_WITH_RC4_128_MD5=TLS_RSA_WITH_RC4_128_MD5
TLS0_RSA_WITH_RC4_128_SHA=TLS_RSA_WITH_RC4_128_SHA
TLS0_RSA_WITH_DES_CBC_SHA =TLS_RSA_WITH_DES_CBC_SHA
TLS0_RSA_WITH_3DES_EDE_CBC_SHA =TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS0_DH_DSS_WITH_DES_CBC_SHA=TLS_DH_DSS_WITH_DES_CBC_SHA
TLS0_DH_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
TLS0_DH_RSA_WITH_DES_CBC_SHA=TLS_DH_RSA_WITH_DES_CBC_SHA
TLS0_DH_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
TLS0_DHE_DSS_WITH_DES_CBC_SHA=TLS_DHE_DSS_WITH_DES_CBC_SHA
TLS0_DHE_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
TLS0_DHE_RSA_WITH_DES_CBC_SHA=TLS_DHE_RSA_WITH_DES_CBC_SHA
TLS0_DHE_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA

TLS1_RSA_WITH_AES_128_CBC_SHA=TLS_RSA_WITH_AES_128_CBC_SHA 
TLS1_DH_DSS_WITH_AES_128_CBC_SHA=TLS_DH_DSS_WITH_AES_128_CBC_SHA
TLS1_DH_RSA_WITH_AES_128_CBC_SHA=TLS_DH_RSA_WITH_AES_128_CBC_SHA
TLS1_DHE_DSS_WITH_AES_128_CBC_SHA=TLS_DHE_DSS_WITH_AES_128_CBC_SHA
TLS1_DHE_RSA_WITH_AES_128_CBC_SHA=TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS1_RSA_WITH_AES_256_CBC_SHA =TLS_RSA_WITH_AES_256_CBC_SHA 
TLS1_DH_DSS_WITH_AES_256_CBC_SHA=TLS_DH_DSS_WITH_AES_256_CBC_SHA
TLS1_DH_RSA_WITH_AES_256_CBC_SHA=TLS_DH_RSA_WITH_AES_256_CBC_SHA
TLS1_DHE_DSS_WITH_AES_256_CBC_SHA=TLS_DHE_DSS_WITH_AES_256_CBC_SHA
TLS1_DHE_RSA_WITH_AES_256_CBC_SHA=TLS_DHE_RSA_WITH_AES_256_CBC_SHA

TLS2_RSA_WITH_NULL_MD5=TLS_RSA_WITH_NULL_MD5
TLS2_RSA_WITH_NULL_SHA=TLS_RSA_WITH_NULL_SHA
TLS2_RSA_WITH_NULL_SHA256 =TLS_RSA_WITH_NULL_SHA256 
TLS2_RSA_WITH_RC4_128_MD5=TLS_RSA_WITH_RC4_128_MD5
TLS2_RSA_WITH_RC4_128_SHA=TLS_RSA_WITH_RC4_128_SHA
TLS2_RSA_WITH_3DES_EDE_CBC_SHA=TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_RSA_WITH_AES_128_CBC_SHA =TLS_RSA_WITH_AES_128_CBC_SHA
TLS2_RSA_WITH_AES_256_CBC_SHA=TLS_RSA_WITH_AES_256_CBC_SHA 
TLS2_RSA_WITH_AES_128_CBC_SHA256=TLS_RSA_WITH_AES_128_CBC_SHA256
TLS2_RSA_WITH_AES_256_CBC_SHA256=TLS_RSA_WITH_AES_256_CBC_SHA256

TLS2_DH_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
TLS2_DH_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_DHE_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
TLS2_DHE_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_DH_DSS_WITH_AES_128_CBC_SHA=TLS_DH_DSS_WITH_AES_128_CBC_SHA
TLS2_DH_RSA_WITH_AES_128_CBC_SHA=TLS_DH_RSA_WITH_AES_128_CBC_SHA
TLS2_DHE_DSS_WITH_AES_128_CBC_SHA=TLS_DHE_DSS_WITH_AES_128_CBC_SHA
TLS2_DHE_RSA_WITH_AES_128_CBC_SHA=TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS2_DH_DSS_WITH_AES_256_CBC_SHA=TLS_DH_DSS_WITH_AES_256_CBC_SHA
TLS2_DH_RSA_WITH_AES_256_CBC_SHA=TLS_DH_RSA_WITH_AES_256_CBC_SHA
TLS2_DHE_DSS_WITH_AES_256_CBC_SHA=TLS_DHE_DSS_WITH_AES_256_CBC_SHA
TLS2_DHE_RSA_WITH_AES_256_CBC_SHA=TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS2_DH_DSS_WITH_AES_128_CBC_SHA256=TLS_DH_DSS_WITH_AES_128_CBC_SHA256
TLS2_DH_RSA_WITH_AES_128_CBC_SHA256 =TLS_DH_RSA_WITH_AES_128_CBC_SHA256 
TLS2_DHE_DSS_WITH_AES_128_CBC_SHA256=TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
TLS2_DHE_RSA_WITH_AES_128_CBC_SHA256=TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS2_DH_DSS_WITH_AES_256_CBC_SHA256=TLS_DH_DSS_WITH_AES_256_CBC_SHA256
TLS2_DH_RSA_WITH_AES_256_CBC_SHA256=TLS_DH_RSA_WITH_AES_256_CBC_SHA256
TLS2_DHE_DSS_WITH_AES_256_CBC_SHA256=TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
TLS2_DHE_RSA_WITH_AES_256_CBC_SHA256=TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS2_RSA_WITH_AES_128_GCM_SHA256=TLS_RSA_WITH_AES_128_GCM_SHA256
TLS2_RSA_WITH_AES_256_GCM_SHA384=TLS_RSA_WITH_AES_256_GCM_SHA384
TLS2_DHE_RSA_WITH_AES_128_GCM_SHA256=TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS2_DHE_RSA_WITH_AES_256_GCM_SHA384=TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS2_DH_RSA_WITH_AES_128_GCM_SHA256=TLS_DH_RSA_WITH_AES_128_GCM_SHA256
TLS2_DH_RSA_WITH_AES_256_GCM_SHA384=TLS_DH_RSA_WITH_AES_256_GCM_SHA384
TLS2_DHE_DSS_WITH_AES_128_GCM_SHA256=TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
TLS2_DHE_DSS_WITH_AES_256_GCM_SHA384=TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
TLS2_DH_DSS_WITH_AES_128_GCM_SHA256=TLS_DH_DSS_WITH_AES_128_GCM_SHA256
TLS2_DH_DSS_WITH_AES_256_GCM_SHA384=TLS_DH_DSS_WITH_AES_256_GCM_SHA384