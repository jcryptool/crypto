Buttons_0=Zur\u00fccksetzen
Buttons_1=Setzt alle Werte zur\u00fcck
Buttons_11=Protokoll mehrmals automatisch durchf\u00fchren
Buttons_2=Neuer Durchlauf
Buttons_3=Erm\u00f6glicht einen neuen Durchlauf durch das Protokoll
Buttons_4=Mehrmals ausf\u00fchren
GeneralParams_0=n :
GeneralParams_1=-
GeneralParams_2=-
Generator_0=Primzahlen spielen in der Kryptographie eine wichtige Rolle.\nHier erzeugen Sie zwei zuf\u00e4llige Primzahlen p und q aus dem Wertebereich [2^Untergrenze, 2^Obergrenze].\nDie Summe der Exponenten der Obergrenzen muss kleiner sein als 30.
Generator_1=Wertebereich der beiden Primzahlen
Generator_10=p: Obergrenze muss eine ganze Zahl sein
Generator_11=Summe der Obergrenzen > 30
Generator_12=q: Untergrenze muss gesetzt sein
Generator_13=q: Obergrenze muss gesetzt sein
Generator_14=q: Untergrenze muss eine ganze Zahl sein
Generator_15=q: Obergrenze muss eine ganze Zahl sein
Generator_16=Summe der Obergrenzen > 30
Generator_17=Die Primzahlen p und q generieren
Generator_18=Primzahlen \u00fcbernehmen
Generator_19=\u00DCbernimmt die generierten Primzahlen
Generator_2=Unabh\u00e4ngig voneinander eingeben
Generator_20=Schlie\u00dFen
Generator_21=Beendet den Dialog, ohne die Primzahlen zu \u00fcbernehmen
Generator_3=Beide gleich (nur eine eingeben)
Generator_6=Primzahlen generieren
Generator_7=p: Untergrenze muss gesetzt sein
Generator_8=p: Obergrenze muss gesetzt sein
Generator_9=p: Untergrenze muss eine ganze Zahl sein
Introduction_0=Situation
Introduction_10=Pr\u00fcfer
Introduction_22=W\u00e4hlen Sie zwei Primzahlen p und q. Die Zahl n = pq ist der \u00f6ffentliche Modul. Carol behauptet, sie sei Alice und kenne einen Vektor s mit v = s\u00B2 mod n. Die Quadratzahl v wird \u00f6ffentlich bekannt gegeben.
Introduction_24=W\u00e4hlen Sie zwei Primzahlen p und q. Die Zahl n = pq ist der \u00f6ffentliche Modul. Carol behauptet, sie sei Alice und kenne eine Zahl s mit v = s\u00B2 mod n. Die Quadratzahl v wird \u00f6ffentlich bekannt gegeben.
Introduction_26=Carol m\u00f6chte sich als Alice ausgeben und behauptet, einen Isomorphismus f von G_0 zu G_1 zu kennen. Nun m\u00f6chte sie Bob davon \u00fcberzeugen, dass sie f kennt.
Introduction_28=Carol (C) behauptet, Alice zu sein und den geheimen Code f\u00fcr die T\u00fcr zwischen dem linken und dem rechten Raum zu kennen. Sie soll sich Bob (B) gegen\u00fcber authentifizieren.
Introduction_29=Angreifer
Introduction_3=W\u00e4hlen Sie zwei Primzahlen p und q. Die Zahl n = pq ist der \u00f6ffentliche Modul. Alice kennt einen Vektor s mit Eintr\u00e4gen s_i < n mit ggT(s_i, n) = 1 und v = s\u00B2 mod n. Die Quadratzahl v wird \u00f6ffentlich bekannt gegeben.
Introduction_5=W\u00e4hlen Sie zwei Primzahlen p und q. Die Zahl n = pq ist der \u00f6ffentliche Modul. Alice kennt eine Zahl s < n und v = s\u00B2 mod n. Die Quadratzahl v wird \u00f6ffentlich bekannt gegeben.
Introduction_7=Dieses Protokoll beruht auf dem Graphenisomorphie-Problem. Alice kennt einen Isomorphismus f von G_0 zu G_1. Bob m\u00f6chte sich nun von Alice beweisen lassen, dass sie f wirklich kennt.
Introduction_9=Alice (A) behauptet, den geheimen Code f\u00fcr die T\u00fcr zwischen dem linken und dem rechten Raum zu kennen. Sie soll sich Bob (B) gegen\u00fcber authentifizieren.
PrimeGenerator_0=Primzahleingabe
PrimeGenerator_1=p :
PrimeGenerator_2=Primzahlen generieren
PrimeGenerator_3=Die Primzahlen p und q generieren
PrimeGenerator_4=q :
PrimeGenerator_5=Geheimnis erstellen
PrimeGenerator_6=Primzahlen \u00fcbernehmen
PrimeGenerator_7=Die Primzahlen \u00fcbernehmen
PrimeGenerator_8=______________
PrimeGeneratorListener_0=p und q m\u00fcssen gesetzt sein
PrimeGeneratorListener_1=p muss gesetzt sein
PrimeGeneratorListener_2=q muss gesetzt sein
PrimeGeneratorListener_3=p muss eine ganze Zahl sein
PrimeGeneratorListener_4=q muss eine ganze Zahl sein
PrimeGeneratorListener_5=p muss eine Primzahl sein
PrimeGeneratorListener_6=q muss eine Primzahl sein
PrimeGeneratorListener_7=p darf nicht negativ sein
PrimeGeneratorListener_8=q darf nicht negativ sein
PrimePanel_0=Primzahl 
PrimePanel_1=Untergrenze: 2^
PrimePanel_2=7
PrimePanel_3=Obergrenze: 2^
PrimePanel_4=8
PrimePanel_5=Ergebnis:
Repeat_0=Mehrmals durchf\u00fchren
Repeat_1=% Wahrscheinlichkeit, Bob zu t\u00e4uschen.
Repeat_2=Alice kennt das Geheimnis.\nSie wird alle Anfragen richtig beantworten.
Repeat_3=Carol kennt das Geheimnis nicht.\nSie wird von k Anfragen im Schnitt k/2 richtig beantworten.
Repeat_4=Anzahl der Wiederholungen:
Repeat_5=\ mal richtig:
Repeat_6=\ (Bob wurde get\u00e4uscht)
Repeat_7=\ (Bob wurde nicht get\u00e4uscht)
Repeat_8=Das Protokoll wird so oft durchgef\u00fchrt, wie Sie angegeben haben.
Repeat_9=Start
