SignalEncryption_Title=Signal Protocol - Double Ratchet Encryption
SignalEncryption_Description=The Signal Protocol is the key exchange and encryption scheme used in the Signal messenger as well as WhatsApp.\nThe protocol consists of 2 parts:\n         An adapted Diffie-Hellman key exchange called eXtended Triple Diffie-Hellman (X3DH) to establish a shared secret\n         The \u201CDouble Ratchet\u201C scheme to derive keys for exchanging messages\n\nThis plug-in visualizes the Double Ratchet scheme step-by-step.

SignalEncryption_TabTitleOverView=Overview
SignalEncryption_TabTitleRatchetView=Double Ratchet

Overview_GroupTitleIdentities=Identities and pre-key bundles
Overview_GroupTitleDoubleRatchet=Double Ratchet
Overview_PreKeyBundle=Pre-key bundle
Overview_DiscardWarningTitle=Warning
Overview_DiscardWarningMessage=When you create a new identity, the progress in the Double Ratchet tab has to be reset.
Overview_IdentityFingerprint=Identity fingerprint
Overview_generateIdentityBoth=Re-create\nidentities/keys
Overview_generateIdentityPerson=Re-create\nidentity/keys
Overview_IdentityPublicKey=Identity public key
Overview_PreKey=Pre-key
Overview_PreKeySignature=Signed Pre-key
Overview_DoubleRatchetOverview=The Double Ratchet algorithm is used to derive a message encryption key. It consists of two steps:\n      \u2022 Diffie-Hellman Ratchet\n      \u2022 Symmetric Ratchet\nThe visualization shows each step of the protocol when exchanging messages.
Overview_showDoubleRatchet=Show Double Ratchet visualization
Overview_QuestionX3DH=What is the eXtended priple Diffie-Hellman key exchange (X3DH) ?
Overview_AnswerX3DH=Similar to a normal Diffie-Hellman (DH) key exchange, the X3DH protocol is used to securely establish a secret between two parties. If Alice wants to initialize a communication channel with Bob she first downloads his prekey bundle and generates a new DH key pair (ephemeral key). Following keys are used:\n    \u2022 Alice's identity key\n    \u2022 Alice's ephemeral key\n    \u2022 Bob's identity key\n    \u2022 Bob's signed prekey\n    \u2022 (optional) Bob's one-time key.\nThree (respectively four if the optional key is present) Diffie-Hellman calculations are done. All results are concatenated and put into a key derivation function (KDF). The result is a shared secret:\n    \u2022 DH1 = DH(identity key Alice, prekey Bob) \n    \u2022 DH2 = DH(ephemeral key Alice, identity key Bob) \n    \u2022 DH3 = DH(ephemeral key Alice, prekey Bob) \n    \u2022 DH4 = DH(ephemeral key Alice, one-time key Bob) \nShared secret = KDF(DH1 || DH2 || DH3 || DH4)
Overview_QuestionPreKeyBundle=What is an identity and a pre-key bundle?
Overview_AnswerPreKeyBundle=In the protocol, an identity consists of an ID and a key pair. This identity key is part of so-called "pre-key bundles". A bundle consists of\n    \u2022 Your identity key\n    \u2022 Your pre-key\n    \u2022 Your pre-Key signature\n    \u2022 (optional) A one-time pre-key.\n\nUsually these bundles are stored on a central, trusted server. A party can collect the bundle to initialize the communication.
Overview_QuestionDoubleRatchetSecurity=What security features does the protocol offer?
Overview_AnswerDoubleRatchetSecurity=The Double Ratchet key derivation is designed to protect future messages, even if an attacker manages to compromise paste messages or keys. If for example an attacker learns about a single shared secret of a Diffie-Hellman secret exchange, they cannot decrypt any past or future messages.
Overview_QuestionDoubleRatchetInit=How does the Double Ratchet protocoll get initialized?
Overview_AnswerDoubleRatchetInit=Before the protocol starts both sender and receiver need a shared secret (see eXtended triple Diffie-Hellman (X3DH)). This secret is used to derive the initial keys of the root chain and the sending/receiving chain. Additionally, the sender requires another public key of their communication partner for the first Diffie-Hellman ratchet step. It can be distributed among the X3DH process.

Name_Alice=Alice
Name_Bob=Bob
Name_AliceGenitive=Alices
Name_BobGenitive=Bobs
Name_Alice_Space=Alice 
Name_Bob_Space=Bob 
Name_AliceGenitive_Space=Alices 
Name_BobGenitive_Space=Bobs 
Name_AlicePronoun=she
Name_AlicePronounPossessive=her
Name_BobPronoun=he
Name_BobPronounPossessive=his

DoubleRatchet_buttonBack=Back
DoubleRatchet_buttonNext=Next

DoubleRatchet_stepGroupDescription=Steps
DoubleRatchet_DiffieHellmanGroupDescription=: Diffie-Hellman ratchet
DoubleRatchet_RootChainDescription=: Root chain
DoubleRatchet_SendingChainDescription=: Sending chain
DoubleRatchet_ReceivingChainDescription=: Receiving chain
DoubleRatchet_MessageDecryptionDescription=: Decrypt message
DoubleRatchet_MessageBoxDescription=Message
DoubleRatchet_DefaultPlainText=Enter a message for {OtherName} .

DoubleRatchet_DiffieHellmanLabelTop={OtherNameGenitive} DH public key
DoubleRatchet_DiffieHellmanLabelMid=DH calculation
DoubleRatchet_DiffieHellmanLabelBot={NameGenitive} DH private key 

DoubleRatchet_RootChainLabelTop=Root chain key
DoubleRatchet_RootChainLabelMid=KDF
DoubleRatchet_RootChainLabelBot=New root chain key

DoubleRatchet_SendingChainLabelTop=Sending chain key
DoubleRatchet_SendingChainLabelMid=KDF
DoubleRatchet_SendingChainLabelBot=New sending chain key
DoubleRatchet_ReceivingChainLabelTop=Receiving chain key
DoubleRatchet_ReceivingChainLabelMid=KDF
DoubleRatchet_ReceivingChainLabelBot=New receiving chain key

DoubleRatchet_ChainLabelConst=Constant
DoubleRatchet_MessageKeyLabel=Message key

DoubleRatchet_TypeEcPublic=Elliptic curve public key
DoubleRatchet_TypeEcPrivate=Elliptic curve private key
DoubleRatchet_TypeSharedSecret=Shared secret
DoubleRatchet_TypeChainKey=Chain key
DoubleRatchet_TypeNewChainKey=New chain key
DoubleRatchet_TypeRootChainKey=Chain key
DoubleRatchet_TypeRootOutput=Output bytes
DoubleRatchet_TypeNewRootChainKey=New chain key
DoubleRatchet_TypeBytes=Bytes
DoubleRatchet_TypeSymmAes=AES-128
DoubleRatchet_TypeSymmCount=Counter
DoubleRatchet_TypeSymmIv=IV
DoubleRatchet_TypeSymmMac=MAC

DoubleRatchet_TopBarStatusSending=sending
DoubleRatchet_TopBarStatusReceiving=receiving
DoubleRatchet_Step=Step
DoubleRatchet_sendingInitialMessage=initializes the communication
DoubleRatchet_sendingAnyMessage=is sending a message
DoubleRatchet_waitingForInitialMessage=is waiting for the first message
DoubleRatchet_waitingForAnyMessage=is waiting for a message
DoubleRatchet_MessageBoxDescription=Message

DoubleRatchet_Step1Initial=Diffie-Hellman ratchet: Alice does all setup steps and creates a Diffie-Hellman key pair. She does a Diffie-Hellman calculation with the private key she just generated and Bob's public key. She must receive one of Bob's public keys in the process of initialization. This calculation allows to establish (another) shared secret.
DoubleRatchet_Step2Initial=Root chain: The next step is part of the symmetric ratchet. A major part is a key derivation function (KDF). A KDF is a cryptographic function to derive a seemingly random, but deterministic output from a key and an input. Parts of the secret from the X3DH secret exchange are used as initial root chain key. The input is the shared secret calculated in the Diffie-Hellman ratchet step and a constant value. The output is split into a new root key and the input for the sending chain.
DoubleRatchet_Step3Initial=Sending chain: The sending chain is also part of the symmetric ratchet and uses a KDF as well. The other part of the secret established in the X3DH calculation is used as initial key. The input is the root chain's output and another constant value. The output of this chain is the message key and a new sending chain key.
DoubleRatchet_Step4Initial=Write a message: you can enter a message to send.
DoubleRatchet_Step5SendingInitial=Encrypting the message & send it: Alice encrypts the message with the message key. She attaches the public key of her key pair she used in the Diffie-Hellman ratchet step.\nShe also attaches her pre-key bundle, as it is her first message to Bob.
DoubleRatchet_Step5ReceivingInitial=Receiving a message: Bob receives the message and sets up the protocoll as well, by doing a X3DH secret calculation.
DoubleRatchet_Step6Initial=Diffie-Hellman ratchet: Bob takes Alice's Diffie-Hellman key from the message and does a Diffie-Hellman calculation with his associated private key.
DoubleRatchet_Step7Initial=Root chain: Bob has now both shared secrets as well. He initializes the root chain with the output of the X3DH secret and uses the secret from the Diffie-Hellman ratchet and the same constant values as input. The output is split into a new root chain key and receiving chain input. Bob's root chain is exactly the same as Alice's; that's why the step is called symmetric ratchet.
DoubleRatchet_Step8Initial=Receiving chain: The receiving chain is created the same way as Alice's sending chain. The initial key is from the X3DH secret exchange. The input is a constant value and the root chain's output. Bob's receiving chain is the same as Alice's sending chain. The output consists of the message key to decrypt the message and a new receiving chain key..
DoubleRatchet_Step9Initial=Decrypting the message: Bob decrypts the message with the message key.

DoubleRatchet_Step1=Diffie-Hellman ratchet: {Name} creates a new Diffie-Hellman key pair. {Pronoun} does a Diffie-Hellman calculation with the freshly created private key and {OtherNameGenitive} public key from the previous message. As this public key has already been used in the previous message, it creates a link between each Diffie-Hellman ratchet step. For each message a Diffie-Hellman calculation is done. This seems wasteful, but is no problem for modern computers and strengthens the security of the protocol.
DoubleRatchet_Step2=Root chain: The root chain is continued from the state of the last message. The input is again the Diffie-Hellman shared secret and a constant value. The output is split into a new root chain key and the input for the sending chain. Old chain keys should be deleted, as they are not required anymore. This also makes it harder for attackers to compromise the communication.
DoubleRatchet_Step3=Sending chain: The sending chain is continued from the state of the last sent message. The input is a constant value and the root chain's output. The output is a symmetric message key and a new sending chain key.
DoubleRatchet_Step4=Write a message: you can enter a message to send.
DoubleRatchet_Step5Sending=Encrypting the message & send it: {Name} encrypts the message with the message key. {Name} additionally attaches the public key of the Diffie-Hellman ratchet step to the message.
DoubleRatchet_Step5Receiving=Receiving a message: 
DoubleRatchet_Step6=Diffie-Hellman ratchet: {Name} takes {OtherNameGenitive} Diffie-Hellman key from the message and does a Diffie-Hellman calculation with {pronoun} private key.
DoubleRatchet_Step7=Root chain: The root chain is continued from the state of the last message. The input is again the Diffie-Hellman shared secret and a constant value. The output is split into a new root chain key and the input for the receiving chain.
DoubleRatchet_Step8=Receiving Chain: The receiving chain is continued from the state of the last received message. The input is a constant value and the root chain's output. The output is a symmetric message key and a new receiving chain key.
DoubleRatchet_Step9=Decrypting the message: {Name} decrypts the message with the message key.