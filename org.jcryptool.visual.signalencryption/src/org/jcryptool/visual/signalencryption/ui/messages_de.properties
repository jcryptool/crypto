SignalEncryption_Title=Signal Protokoll - Double Ratchet-Verschlüsselung
SignalEncryption_Description=Beim Signal Protokoll handelt es sich um jenes Schlüsselaustausch- und Verschlüsselungsverfahren das beim Namensgebenden Signal Messenger als auch WhatsApp zum Einsatz kommt.\nDieses Protokoll gliedert sich grob in 2 Abschnitte:\n         Ein 3-facher Diffie-Hellman-Schlüsselaustausch (eXtended Diffie Hellman).\n         Das \u201EDouble Ratchet\u201C Verfahren zum Versenden und Empfangen von Nachrichten.\n\nIn diesem Plugin wird das Double Ratchet-Verfahren Schritt für Schritt erklärt.

SignalEncryption_TabTitleOverView=Übersicht
SignalEncryption_TabTitleRatchetView=Double Ratchet

Overview_GroupTitleIdentities=Identitäten und Pre-Key-Bundles
Overview_GroupTitleDoubleRatchet=Double Ratchet
Overview_PreKeyBundle=Pre-Key-Bundle
Overview_DiscardWarningTitle=Warnung
Overview_DiscardWarningMessage=Wenn Sie eine neue Identität erzeugen, wird der Fortschritt im Double Ratchet-Tab zurückgesetzt.
Overview_IdentityFingerprint=Identitäts-Fingerprint
Overview_generateIdentityBoth=Beide Identitäten/Schlüssel\nneu erzeugen
Overview_generateIdentityPerson=Identität/Schlüssel\nneu erzeugen
Overview_IdentityPublicKey=Identity Public Key
Overview_PreKey=Pre-Key
Overview_PreKeySignature=Signierter Pre-Key
Overview_DoubleRatchetOverview=Der Double Ratchet-Algorithmus wird verwendet um für eine Nachricht einen Schlüssel abzuleiten. Er besteht aus zwei Schritten:\n      \u2022 Diffie-Hellman-Ratchet\n      \u2022 Symmetrischer Ratchet\nDie Visualisierung zeigt welche Schritte beide Parteien bei einer Kommunikation durchlaufen.
Overview_showDoubleRatchet=Zur Double Ratchet-Visualisierung
Overview_QuestionX3DH=Was ist der eXtended Triple-Diffie-Hellman-Schlüsselaustausch (X3DH) ?
Overview_AnswerX3DH=Ähnlich einem normalen Diffie-Hellman-Schlüsselaustausch erlaubt das X3DH-Protokoll das sichere etablieren eines Geheimnisses zwischen zwei Parteien. Dabei werden folgende Schlüssel verwendet:\n    \u2022 Alices Identity Key\n    \u2022 Alices Ephemeral Key\n    \u2022 Bobs Identity Key\n    \u2022 Bobs signierter Pre-Key\n    \u2022 (optional) Bobs One-Time-Key.\nDann werden 3 (bzw. 4 wenn der optionale Schlüssel verfügbar ist) Diffie-Hellman berechnungen durchgeführt. Alle einzelnen Diffie-Hellman-Ergebnisse werden aneinandergehängt und in eine Key-Derivation-Funktion (KDF) gegeben. Das Ergebnis ist das gemeinsame Geheimnis:\n    \u2022 DH1 = DH(Identity Key Alice, Signierter Pre-Key Bob) \n    \u2022 DH2 = DH(Ephemeral-Key Alice, Identity Key Bob) \n    \u2022 DH3 = DH(Ephemeral-Key Alice, Signierten Pre-Key Bob) \n    \u2022 DH4 = DH(Ephemeral-Key Alice, One-Time-Key Bob) \nGemeinsames Geheimnis = KDF(DH1 || DH2 || DH3 || DH4)
Overview_QuestionPreKeyBundle=Was ist eine Identität und ein Pre-Key Bundle?
Overview_AnswerPreKeyBundle=Eine Identität wird im Protokoll durch eine ID und ein Schlüsselpaar repräsentiert. Dieser Identity Key ist teil des sogenannten "Pre-Key-Bundles". Es besteht aus\n    \u2022 Bobs Identity Key\n    \u2022 Bobs signiertem Pre-Key\n    \u2022 Bobs Pre-Key Signatur\n    \u2022 (optional) Bobs One-Time-Pre-Key.\n\nÜblicherweise werden diese Bundles auf einem zentralen Server verwaltet. Dort kann es von einem Teilnehmer abgeholt werden, um die Kommunikation mittels X3DH zu initialisieren.
Overview_QuestionDoubleRatchetSecurity=Welche Sicherheiten bietet das Protokoll?
Overview_AnswerDoubleRatchetSecurity=Die Double Ratchet-Schlüsselableitung soll Sicherheit für zukünftige Nachrichten bieten, falls ein Angreifer es schafft bereits gesendete Schlüssel oder Nachrichten im nachhinein zu kompromittieren. Erfährt ein Angreifer z.B. das Geheimnis eines Diffie-Hellman-Schlüsselaustauschs, ermöglicht es ihm nicht, vergangene oder zukünftige Nachrichten entschlüsseln zu können.
Overview_QuestionDoubleRatchetInit=Wie wird das Double Ratchet-Verfahren initialisiert?
Overview_AnswerDoubleRatchetInit=Für das Protokoll brauchen beide Parteien (Sender und Empfänger) ein gemeinsames Geheimnis (siehe Extended Triple Diffie-Hellman (X3DH)). Das gemeinsame Geheimnis wird genutzt um die initialien Schlüssel für die Root Chain und für die Sending- bzw. Receiving Chain abzuleiten. Zusätzlich braucht der Sender einen öffentlichen Diffie-Hellman-Schlüssel seines Kommunikationspartners für den ersten Diffie-Hellman-Ratchet-Schritt. Dieser kann beim Durchführen des X3DH-Protokolls mitgeliefert werden.

Name_Alice=Alice
Name_Bob=Bob
Name_AliceGenitive=Alices
Name_BobGenitive=Bobs
Name_Alice_Space=Alice 
Name_Bob_Space=Bob 
Name_AliceGenitive_Space=Alices 
Name_BobGenitive_Space=Bobs 
Name_AlicePronoun=sie
Name_AlicePronounPossessive=ihr
Name_BobPronoun=er
Name_BobPronounPossessive=sein

DoubleRatchet_buttonBack=Zurück
DoubleRatchet_buttonNext=Weiter

DoubleRatchet_stepGroupDescription=Schritte
DoubleRatchet_DiffieHellmanGroupDescription=: Diffie-Hellman-Ratchet
DoubleRatchet_RootChainDescription=: Root Chain
DoubleRatchet_SendingChainDescription=: Sending Chain
DoubleRatchet_ReceivingChainDescription=: Receiving Chain
DoubleRatchet_MessageDecryptionDescription=: Nachricht entschlüsseln
DoubleRatchet_MessageBoxDescription=Nachricht
DoubleRatchet_DefaultPlainText=Geben sie hier ihre Nachricht an {OtherName} ein.

DoubleRatchet_DiffieHellmanLabelTop={OtherNameGenitive} DH Public Key
DoubleRatchet_DiffieHellmanLabelMid=DH Berechnung
DoubleRatchet_DiffieHellmanLabelBot={NameGenitive} DH Private Key 

DoubleRatchet_RootChainLabelTop=Root Chain Key
DoubleRatchet_RootChainLabelMid=KDF
DoubleRatchet_RootChainLabelBot=Neuer Root Chain Key

DoubleRatchet_SendingChainLabelTop=Sending Chain Key
DoubleRatchet_SendingChainLabelMid=KDF
DoubleRatchet_SendingChainLabelBot=Neuer Sending Chain Key
DoubleRatchet_ReceivingChainLabelTop=Receiving Chain Key
DoubleRatchet_ReceivingChainLabelMid=KDF
DoubleRatchet_ReceivingChainLabelBot=Neuer Receiving Chain Key

DoubleRatchet_ChainLabelConst=Konstante
DoubleRatchet_MessageKeyLabel=Message Key

DoubleRatchet_TypeEcPublic=Elliptic Curve Public Key
DoubleRatchet_TypeEcPrivate=Elliptic Curve Private Key
DoubleRatchet_TypeSharedSecret=Gemeinsames Geheimnis
DoubleRatchet_TypeChainKey=Chain Key
DoubleRatchet_TypeNewChainKey=Neuer Chain Key
DoubleRatchet_TypeRootChainKey=Chain Key
DoubleRatchet_TypeRootOutput=Output-Bytes
DoubleRatchet_TypeNewRootChainKey=Neuer Chain Key
DoubleRatchet_TypeBytes=Bytes
DoubleRatchet_TypeSymmAes=AES-128
DoubleRatchet_TypeSymmCount=Counter
DoubleRatchet_TypeSymmIv=IV
DoubleRatchet_TypeSymmMac=MAC

DoubleRatchet_TopBarStatusSending=sendet
DoubleRatchet_TopBarStatusReceiving=empfängt
DoubleRatchet_Step=Schritt
DoubleRatchet_sendingInitialMessage=initiiert die Kommunikation.
DoubleRatchet_sendingAnyMessage=sendet eine Nachricht
DoubleRatchet_waitingForInitialMessage=wartet auf die erste Nachricht
DoubleRatchet_waitingForAnyMessage=wartet auf eine Nachricht
DoubleRatchet_MessageBoxDescription=Nachricht

DoubleRatchet_Step1Initial=Diffie-Hellman-Ratchet: Nachdem Alice die notwendigen Parameter initialisiert hat, erzeugt sie ein Diffie-Hellman-Schlüsselpaar. Sie führt eine Diffie-Hellman-Berechnung mit ihrem privaten und Bobs öffentlichem Schlüssel durch. Bobs öffentlichen Schlüssel muss sie im Zuge der Initialisierung von ihm erhalten. Aus der Diffie-Hellman-Berechnung erhalten beide Kommunikationspartner ein gemeinsames Geheimnis.
DoubleRatchet_Step2Initial=Root Chain: Der nächste Schritt ist teil des Symmetrischen Ratchet. Dabei wird eine Schlüssel-Ableitungs-Funktion, kurz KDF (Key Derivation Function) verwendet. Eine KDF ist eine kryptografische Funktion, die aus einen geheimen Schlüssel und einem Input einen scheinbar zufälligen Output erzeugt. Als initialer Root Chain Key wird ein Teil des gemeinsamen Geheimnis verwendet, das im X3DH-Schlüsselaustausch erstellt wurde. Als Input für die Root Chain wird das aus dem Diffie-Hellman-Ratchet berechnete gemeinsame Geheimnis und eine Konstante verwendet. Der Output der Root Chain wird in einen neuen Root Chain Key und den Sending Chain Input aufgeteilt.
DoubleRatchet_Step3Initial=Sending Chain: Die Sending Chain ist ebenfalls eine KDF des Symmetrischen Ratchets. Als initialer Sending Chain Key wird der andere Teil des gemeinsamen Geheimnis verwendet, das im X3DH-Schlüsselaustausch erstellt wurde. Als Input wird der Output der Root Chain und eine weitere Konstante verwendet. Der Output der Sending Chain ist ein Message Key und ein neuer Sending Chain Key.
DoubleRatchet_Step4Initial=Nachricht verfassen: Jetzt können Sie eine Nachricht eingeben.
DoubleRatchet_Step5SendingInitial=Nachricht verschlüsseln & senden: Alice verschlüsselt nun ihre Nachricht mit ihrem Message Key. Mit der verschlüsselten Nachricht sendet Alice zusätzlich den öffentlichen Schlüssel des Diffie Hellman-Ratchets.\nDa es sich um die erste Nachricht an Bob handelt, hängt sie zusätzlich noch ihr Pre-Key-Bundle an.
DoubleRatchet_Step5ReceivingInitial=Nachricht empfangen: Bob erhält die Nachricht und initialisiert ebenfalls das Verfahren, indem er einen X3DH-Schlüsselaustausch durchführt.
DoubleRatchet_Step6Initial=Diffie Hellman Ratchet: Bob nimmt Alices Diffie-Hellman-Schlüssel aus der Nachricht und führt eine Diffie Hellman Berechnung mit seinem dazugehörigen privaten Schlüssel durch.
DoubleRatchet_Step7Initial=Root Chain: Bob verfügt nun ebenfalls über beide gemeinsamen Geheimnisse. Er initialisiert die Root Chain mit dem Output aus dem X3DH-Geheimnis und verwendet das Diffie Hellman-Geheimnis und die selbe Konstante als Input. Der Output der Root Chain wird in einen neuen Root Chain Key und einen Receiving Chain Key aufgeteilt. Die Root Chain gleicht an dieser Stelle exakt Alices Root Chain; daher heißt dieser Schritt auch Symmetrischer Ratchet.
DoubleRatchet_Step8Initial=Receiving Chain: Die Receiving Chain wird gleich erzeugt wie die Sending Chain auf Alices Seite. Der initiale Schlüssel ist der andere Teil des X3DH-Geheimnisses, der Input eine Konstante und der Output der Root Chain. Bobs Receiving Chain ist damit exakt gleich zu Alices Sending Chain. Der Output ergibt den Message Key zur Entschlüsselung der Nachricht und einen neuen Receiving Chain Key.
DoubleRatchet_Step9Initial=Nachricht entschlüsseln: Bob entschlüsselt die Nachricht mit dem Message Key.

DoubleRatchet_Step1=Diffie Hellman-Ratchet: {Name} erzeugt ein neues Diffie Hellman-Schlüsselpaar. {Pronoun} führt eine Diffie-Hellman-Berechnung mit dem gerade erstellten privaten Schlüssel und {OtherNameGenitive} öffentlichen Schlüssel der vorherigen Nachricht durch. Da dieser öffentliche Schlüssel schon einmal verwendet wurde, ergibt das eine Verkettung mit der vorherigen Nachricht. Dass für jede Nachricht eine Diffie-Hellman-Berechnung durchgeführt wird, mag verschwenderisch erscheinen. Es ist aber für moderne Computer kein Problem und erhöht die Sicherheits des Protokolls.
DoubleRatchet_Step2=Root Chain: Die Root Chain wird basierend auf dem Root Chain Key der letzten Nachricht fortgesetzt. Als Input für die Root Chain wird der zuvor berechnete Output aus dem Diffie Hellman-Ratchet-Schritt und der Konstante verwendet. Der Output der Root Chain wird in einen neuen Root Chain Key und den Sending Chain Input aufgeteilt. Alte Root Chain Keys sollten gelöscht werden, weil sie nicht mehr benötigt werden. Das erschwert auch Angreifern das Kompromittieren der Kommunikation.
DoubleRatchet_Step3=Sending Chain: Die Sending wird basierend auf dem Sending Chain Key der letzten gesendeten Nachricht fortgesetzt. Als Input wird der Output der Root Chain und eine weitere Konstante verwendet. Der Output der Sending Chain ist ein Message Key und ein neuer Sending Chain Key.
DoubleRatchet_Step4=Nachricht verfassen: Jetzt können Sie eine Nachricht eingeben.
DoubleRatchet_Step5Sending=Nachricht verschlüsseln & senden: {Name} verschlüsselt nun die Nachricht und verwendet dabei den Message Key. Mit der verschlüsselten Nachricht sendet {Name} zusätzlich den öffentlichen Schlüssel des Diffie Hellman-Ratchets.
DoubleRatchet_Step5Receiving=Nachricht empfangen: 
DoubleRatchet_Step6=Diffie Hellman Ratchet: {Name} nimmt {OtherNameGenitive} Diffie-Hellman-Schlüssel aus der Nachricht und führt eine Diffie Hellman-Berechnung mit dem dazugehörigen privaten Schlüssel durch.
DoubleRatchet_Step7=Root Chain: Die Root Chain wird basierend auf dem Root Chain Key der letzten Nachricht fortgesetzt. Als Input für die Root Chain wird der zuvor berechnete Output aus dem Diffie Hellman-Ratchet-Schritt und der Konstante verwendet. Der Output der Root Chain wird in einen neuen Root Chain Key und den Sending Chain Input aufgeteilt.
DoubleRatchet_Step8=Receiving Chain: Die Receiving Chain wird gleich erzeugt wie die Sending Chain auf {OtherNameGenitive} Seite. Der Schlüssel ist der letzte Receiving Chain Key, der Input eine Konstante und der Output der Root Chain. {NameGenitive} Receiving Chain ist damit exact gleich zu {OtherNameGenitive} Sending Chain. Der Output ergibt den Message Key zur Entschlüsselung der Nachricht und einen neuen Receiving Chain Key.
DoubleRatchet_Step9=Nachricht entschlüsseln: {Name} entschlüsselt die Nachricht mit dem Message Key.
