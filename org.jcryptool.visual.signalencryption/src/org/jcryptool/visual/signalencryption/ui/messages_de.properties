SignalEncryption_Title=Signal Protokoll - Double Ratchet-Verschlüsselung
SignalEncryption_Description=Beim Signal Protokoll handelt es sich um jenes Verfahren das beim Namensgebenden Signal Messenger als auch WhatsApp zum Einsatz kommt.\nDieses Protokoll gliedert sich grob in 2 Abschnitte:\n         Ein 3-facher Diffie-Hellman (DH) Schlüsselaustausch.\n         Das \u201EDouble Ratchet\u201C Verfahren zum Versenden und Empfangen von Nachrichten.\n\nIn diesem Plugin wird das Double Ratchet-Verfahren Schritt für Schritt erklärt.

SignalEncryption_TabTitleOverView=Übersicht
SignalEncryption_TabTitleRatchetView=Double Ratchet

SignalEncryption_TabDesc2=Der Double Ratchet Algorithmus basiert auf ein gemeinsames Geheimnis zwischen den Kommunikationspartnern. Typischerweise nutzen die Kommunikationspartner ein Schlüsselaustauschprotokoll wie X3DH (siehe Online Hilfe) um sich auf dieses gemeinsame Geheimnis zu einigen.\n
Overview_GroupTitleIdentities=Identitäten und Pre-Key-Bundles
Overview_GroupTitleDoubleRatchet=Double Ratchet
Overview_PreKeyBundle=Pre-Key-Bundle
Overview_DiscardWarningTitle=Warnung
Overview_DiscardWarningMessage=Wenn Sie eine neue Identität erzeugen, wird der Fortschritt im Double Ratchet-Tab zurückgesetzt.
Overview_IdentityFingerprint=Identitäts-Fingerprint
Overview_generateIdentityBoth=Beide Identitäten/Schlüssel\nneu erzeugen
Overview_generateIdentityPerson=Identität/Schlüssel\nneu erzeugen
Overview_IdentityPublicKey=Identity Public Key
Overview_PreKey=Pre Key
Overview_PreKeySignature=Pre Key Signatur
Overview_DoubleRatchetOverview=Der Double Ratchet-Algorithmus wird verwendet um für eine Nachricht einen Schlüssel abzuleiten. Er besteht aus zwei Schritten:\n      \u2022 Diffie-Hellman-Ratchet\n      \u2022 Symmetrischer Ratchet\nDie Visualisierung zeigt welche Schritte beide Parteien bei einer Kommunikation durchlaufen.
Overview_showDoubleRatchet=Zur Double Ratchet-Visualisierung
Overview_QuestionX3DH=Was ist der Extended Triple Diffie-Hellman (X3DH) Schlüsselaustausch?
Overview_AnswerX3DH=Ähnlich einem normalen Diffie-Hellman Schlüsselaustausch erlaubt das X3DH-Protokoll das sichere etablieren eines Geheimnisses zwischen zwei Parteien. Dabei werden folgende Schlüssel verwendet:\n    \u2022 Alices Identity Key\n    \u2022 Alices Ephemeral Key\n    \u2022 Bobs Identity Key\n    \u2022 Bobs signierter Pre-Key\n    \u2022 (optional) Bobs One-Time-Key.\nDann werden 3 (bzw. 4 wenn der optionale Schlüssel verfügbar ist) Diffie-Hellman berechnungen durchgeführt. Alle einzelnen Diffie-Hellman-Ergebnisse (DH) werden aneinandergehängt und in eine Key-Derivation-Funktion (KDF) gegeben. Das Ergebnis daraus ist das gemeinsame Geheimnis:\n    \u2022 DH1 = DH(Identity Key Alice, Signierter Pre-Key Bob) \n    \u2022 DH2 = DH(Ephemeral-Key Alice, Identity Key Bob) \n    \u2022 DH3 = DH(Ephemeral-Key Alice, Signierten Pre-Key Bob) \n    \u2022 DH4 = DH(Ephemeral-Key Alice, One-Time-Key Bob) \nGemeinsames Geheimnis = KDF(DH1 || DH2 || DH3 || DH4)
Overview_QuestionPreKeyBundle=Was ist ein Pre-Key Bundle?
Overview_AnswerPreKeyBundle=Ein Pre-Key Bundle besteht aus\n    \u2022 Bobs Identity Key\n    \u2022 Bobs signiertem Pre-Key\n    \u2022 Bobs Pre-Key Signatur\n    \u2022 (optional) Bobs One-Time-Pre-Key.\n\nÜblicherweise werden diese Bundles auf einem zentralen Server verwaltet. Dort kann es von einem Teilnehmer abgeholt werden, um die Kommunikation mittels X3DH zu initialisieren.
Overview_QuestionDoubleRatchetSecurity=Welche Sicherheiten bietet das Protokoll?
Overview_AnswerDoubleRatchetSecurity=Die Double-Ratchet Schlüsselableitung soll Sicherheit für zukünftige Nachrichten bieten, falls ein Angreifer es schafft bereits gesendete Schlüssel oder Nachrichten im nachhinein zu kompromittieren. Das brechen einzelner Nachrichten der Kommunikation in der Vergangenheit, erlaubt es nicht, zukünftige Nachrichten entschlüsseln zu können.
Overview_QuestionDoubleRatchetInit=Wie wird das Double Ratchet-Verfahren initialisiert?
Overview_AnswerDoubleRatchetInit=Für das Protokoll brauchen beide Parteien (Sender und Empfänger) ein gemeinsames Geheimnis (siehe Extended Triple Diffie-Hellman (X3DH)). Das gemeinsame Geheimnis wird genutzt um die initialien Schlüssel für die Root Chain und für die Sending- bzw. Receiving Chain abzuleiten. Zusätzlich braucht der Sender einen öffentlichen Diffie-Hellman-Schlüssel für den ersten Diffie-Hellman Ratchet-Schritt. Dieser kann beim Durchführen des X3DH-Protokolls mitgeliefert werden.
Name_Alice=Alice
Name_Bob=Bob
Name_AliceGenitive=Alices
Name_BobGenitive=Bobs
Name_Alice_Space=Alice 
Name_Bob_Space=Bob 
Name_AliceGenitive_Space=Alices 
Name_BobGenitive_Space=Bobs 

SignalEncryption_KeyName_Diffie_Private=Diffie Hellman private key
SignalEncryption_KeyName_Diffie_Public=Diffie Hellman public key
SignalEncryption_KeyName_Shared=Shared Secret Key
SignalEncryption_KeyName_Root=Root Chain Key
SignalEncryption_KeyName_Sending=Sending Chain Key
SignalEncryption_KeyName_Receiving=Receiving Chain Key
SignalEncryption_KeyName_MsgKey=Message Key

SignalEncryption_DescText_Diffie_Private=Der private DH Schlüssel der jeweiligen Person
SignalEncryption_DescText_Diffie_Public=Der öffentliche DH Schlüssel der jeweiligen Person
SignalEncryption_DescText_Shared=Geheimer Schlüssel der von den Kommunikationspartnern mittels einem vereinbarten Schlüsselaustausch erstellt wird. Dieser Schlüssel dient als erster Root Chain Key.
SignalEncryption_DescText_Root=Wird als Ausgangswert für die Sending und Receiving Chains verwendet.
SignalEncryption_DescText_Sending=Wird verwendet um einen Message Key zu generieren. 
SignalEncryption_DescText_Receiving=Wird verwendet um einen Message Key zu generieren.
SignalEncryption_DescText_MsgKey=Ist ein Output aus der Sending Chain bzw. der Receiving Chain und wird verwendet um eine Nachricht zu ver- oder entschlüsseln."


SignalEncryption_btnName_Alice=Alice
SignalEncryption_btnName_Bob=Bob
SignalEncryption_btnName_Previous=Zurück
SignalEncryption_btnName_Next=Weiter

SignalEncryption_alice_AlgorithmGroupDescription=Alice
SignalEncryption_bob_AlgorithmGroupDescription=Bob
SignalEncryption_stepGroupDescription=Schritte
SignalEncryption_DiffieHellmanGroupDescription=Schritt 1: Diffie Hellman Ratchet
SignalEncryption_RootChainDescription=Schritt 2: Root Chain
SignalEncryption_SendingChainDescription=Schritt 3: Sending Chain
SignalEncryption_ReceivingChainDescription=Schritt 3: Receiving Chain
SignalEncryption_MessageBoxDescription=Nachricht

SignalEncryption_aliceDiffieHellmanLabel1=Bobs DH Public Key
SignalEncryption_aliceDiffieHellmanLabel2=DH Berechnung
SignalEncryption_aliceDiffieHellmanLabel3=Alices DH Schlüsselpaar
SignalEncryption_bobDiffieHellmanLabel1=Alices DH Public Key
SignalEncryption_bobDiffieHellmanLabel2=DH Berechnung
SignalEncryption_bobDiffieHellmanLabel3=Bobs DH Schlüsselpaar

SignalEncryption_aliceRootChainLabel1=Root Chain Key
SignalEncryption_aliceRootChainLabel2=KDF
SignalEncryption_aliceRootChainLabel3=Neuer Root Chain Key
SignalEncryption_bobRootChainLabel1=Root Chain Key
SignalEncryption_bobRootChainLabel2=KDF
SignalEncryption_bobRootChainLabel3=Neuer Root Chain Key
    
SignalEncryption_aliceSendingChainLabel1=Sending Chain Key
SignalEncryption_aliceSendingChainLabel2=Konstante
SignalEncryption_aliceSendingChainLabel3=KDF
SignalEncryption_aliceSendingChainLabel4=Message Key
SignalEncryption_aliceSendingChainLabel5=Neuer Sending Chain Key
SignalEncryption_bobSendingChainLabel1=Sending Chain Key
SignalEncryption_bobSendingChainLabel2=KDF
SignalEncryption_bobSendingChainLabel3=Konstante
SignalEncryption_bobSendingChainLabel4=Message Key
SignalEncryption_bobSendingChainLabel5=Neuer Sending Chain Key

SignalEncryption_aliceDefaultMessage=Geben Sie hier Ihre Nachricht an Bob ein.
SignalEncryption_bobDefaultMessage=Geben Sie hier Ihre Nachricht an Alice ein.

SignalEncryption_aliceReceivingChainLabel1=Receiving Chain Key
SignalEncryption_aliceReceivingChainLabel2=Konstante
SignalEncryption_aliceReceivingChainLabel3=KDF
SignalEncryption_aliceReceivingChainLabel4=Message Key
SignalEncryption_aliceReceivingChainLabel5=Neuer Receiving Chain Key
SignalEncryption_bobReceivingChainLabel1=Receiving Chain Key
SignalEncryption_bobReceivingChainLabel2=KDF
SignalEncryption_bobReceivingChainLabel3=Konstante
SignalEncryption_bobReceivingChainLabel4=Message Key
SignalEncryption_bobReceivingChainLabel5=Neuer Receiving Key
SignalEncryption_MessageboxDescription=Nachricht

SignalEncryption_aliceDescriptionText0=Alice initiiert die Kommunikation.
SignalEncryption_bobDescriptionText0=Warten auf Erhalt der ersten Nachricht.
SignalEncryption_stepWord=Schritt
SignalEncryption_stepText1=Diffie Hellman Ratchet: Zu Beginn erstellt Alice ein Diffie Hellman Key Pair. Sie führt eine Diffie Hellman Berechnung durch, verwendet dabei ihren privaten Schlüssel und Bobs öffentlichen Schlüssel und berechnet sich daraus einen Output. Dieser Vorgang wird als Diffie Hellman Ratchet Step bezeichnet.
SignalEncryption_stepText2=Root Chain: Der nächste Schritt ist eine Schlüssel-Ableitungs-Funktion, kurz KDF (Key Derivation Function). Eine KDF ist eine kryptografische Funktion, die einen geheimen, zufälligen Schlüssel und einen Input annimmt und einen Output zurückgibt. Als initialer Root Chain Key wird das gemeinsame Geheimnis verwendet, das im X3DH-Schlüsselaustausch erstellt wurde. Als Input für die Root Chain wird der zuvor berechnete Output von Alices Diffie Hellman Ratchet Step und eine Konstante verwendet. Der Output der Root Chain wird in einen neuen Root Chain Key und einen Sending Chain Key aufgeteilt.
SignalEncryption_stepText3=Sending Chain: Die Sending Chain ist ebenfalls eine KDF. Als Schlüssel wird der zuvor in der Root Chain erstellte Sending Chain Key verwendet. Im Gegensatz zur Root Chain, bekommt die Sending Chain einen konstanten Wert als Input. Der Output der Sending Chain ist der Message Key und ein neuer Sending Chain Key.
SignalEncryption_stepText4=Nachricht verfassen: Nun kann Alice ihre Nachricht schreiben.
SignalEncryption_aliceStepText5=Nachricht verschlüsseln & senden: Alice verschlüsselt nun ihre Nachricht und verwendet dabei ihren Message Key. Neben ihrer verschlüsselten Nachricht, sendet Alice ihren öffentlichen Diffie Hellman Schlüssel.\nNun weiter auf Bobs Seite.
SignalEncryption_bobStepText5=Nachricht empfangen
SignalEncryption_stepText6=Diffie Hellman Ratchet: Bob führt eine Diffie Hellman Berechnung durch, verwendet dabei seinen privaten Schlüssel und den von Alice empfangenen öffentlichen Schlüssel und berechnet sich daraus einen Output.
SignalEncryption_stepText7=Root Chain: Als Input für die Root Chain wird der zuvor berechnete Output von Bobs Diffie Hellman Ratchet Step verwendet. Der Output der Root Chain wird in einen neuen Root Chain Key und einen Receiving Chain Key aufgeteilt.
SignalEncryption_stepText8=Receiving Chain: Als Schlüssel wird der zuvor in der Root Chain erstellte Receiving Chain Key verwendet. Als konstanter Input wird der gleiche Wert verwendet, den Alice als Input in ihrer Sending Chain verwendet hat. Der Output der Receiving Chain ist der Message Key und ein neuer Receiving Chain Key.
SignalEncryption_stepText9=Nachricht entschlüsseln: Bob entschlüsselt die Nachricht und verwendet dabei den Message Key.
