#Eclipse messages class for SigComposite
SigComposite_grpSignatureGeneration=Signaturerzeugung
SigComposite_grpSignedDoc=Signiertes Dokument
SigComposite_description=Diese Visualisierung demonstriert die Erzeugung einer Signatur für ein gegebenes Dokument (Nachricht). Eine digitale Signatur kann man benutzen, um den Unterzeichner der Nachricht zu verifizieren.
SigComposite_lblHeader=Signaturvisualisierung
SigComposite_lblHash=
SigComposite_lblSignature=
SigComposite_lblProgress=Schritt %s von 4
#The TabFolder
SigComposite_tbtmNewItem_0=Schritt 1
SigComposite_tbtmNewItem_1=Schritt 2
SigComposite_tbtmNewItem_2=Schritt 3
SigComposite_tbtmNewItem_3=Schritt 4
SigComposite_txtDescriptionOfStep1=\r\nInput ausw\u00e4hlen\r\n\r\nSie k\u00f6nnen ausw\u00e4hlen, was Sie signieren m\u00f6chten: Entweder \u00f6ffnen Sie eine bereits vorhandene Datei oder Sie geben selbst einen Text ein. Um den Signaturerstellungs-Prozess zu starten, klicken Sie den Button "Input ausw\u00e4hlen" und folgen den Anweisungen.
SigComposite_txtDescriptionOfStep2=\r\nHashfunktion ausw\u00e4hlen\r\n\r\nEine Hashfunktion ist ein Algorithmus, der einen Datensatz variabler L\u00e4nge (eine Nachricht) auf einen Datensatz fixer L\u00e4nge (den Hashwert) abbildet. Da die Gr\u00f6\u00dfe des Hashwertes normalerweise viel kleiner ist als die Nachricht, wird direkt der Hashwert signiert. Dadurch wird die Effizienz des Signaturerzeugungsprozesses gesteigert. Bei der Signaturerstellung sowie bei der Verifikation der Signatur muss der gleiche Hashalgorithmus verwendet werden.
SigComposite_txtDescriptionOfStep3=\r\nSignaturfunktion ausw\u00e4hlen\r\n\r\nUm den von Ihnen gew\u00e4hlten Input zu signieren, k\u00f6nnen Sie zwischen verschiedenen Signaturfunktionen ausw\u00e4hlen. Einige Signaturverfahren basieren auf asymmetrischer Verschl\u00fcsselung, wie RSA, andere Verfahren wurden eigens f\u00fcr diesen Zweck entwickelt, wie DSA. Um eine Signatur zu erstellen und anschlie\u00dfend zu pr\u00fcfen, ben\u00f6tigt man zwei verschiedene Schl\u00fcssel. Der private Schl\u00fcssel wird f\u00fcr die Erstellung der Signatur genutzt. Nur der Besitzer des Schl\u00fcssels kennt ihn und muss ihn geheim halten. Der \u00f6ffentliche Schl\u00fcssel kann von jedem verwendet werden, um die Signatur zu verifizieren.
SigComposite_txtDescriptionOfStep4=\r\nMit Hilfe der Signatur kann der Empf\u00e4nger nun die Authentizit\u00e4t des Senders \u00fcberpr\u00fcfen und sicherstellen, dass die Nachricht von diesem stammt und nicht ver\u00e4ndert wurde. Klicken Sie auf den Button \u201EErzeugte Signatur anzeigen\u201C, um die Signatur des gewählten Inputs anzuzeigen. Im folgenden Dialogfenster finden Sie alle relevanten Informationen zu der erzeugten Signatur \u2013 den Besitzer und Informationen \u00fcber den Schl\u00fcssel und die gew\u00e4hlte Signaturfunktion. Au\u00dferdem ist es m\u00f6glich, zwischen verschiedenen Darstellungsm\u00f6glichkeiten zu w\u00e4hlen. 
SigComposite_txtDescriptionOfStep4_Success=\r\nDie Signatur wurde erfolgreich erzeugt!\r\n
#Buttons
SigComposite_btnHash=Hashfunktion
SigComposite_btnSignature=Signaturfunktion
SigComposite_btnChooseInput=Input ausw\u00e4hlen
SigComposite_btnOpenInEditor=Erzeugte Signatur anzeigen
SigComposite_btnReset=Reset
SigComposite_btnReturn=Zur\u00fcck zu JCT-PKI
SigComposite_menu=Alles ausw\u00e4hlen

SigComposite_MessageTextReturn=Klicken Sie auf "Zur\u00fcck zu JCT-PKI" um zur\u00fcckzukehren und dort fortzufahren
SigComposite_MessageTitleReturn=Information
SigComposite_FileInput_Tooltip=Hexadezimaldarstellung der ersten 10 Byte der Input-Datei:\n

SigComposite_Copy=Kopieren