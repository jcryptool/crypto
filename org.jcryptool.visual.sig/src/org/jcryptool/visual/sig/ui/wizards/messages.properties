#Eclipse messages class
#HashWizard
#Group box 1 text
HashWizard_grpHashes=Hash methods
HashWizard_header=Select the hash method you want to use. The chosen hash method determines which signature methods will be available, because some signature methods cannot be combined with all hash methods.
#Group box 2 text
HashWizard_grpDescription=Description
#The Texts for the descriptions of the methods
HashWizard_WindowTitle=Select the hash method
HashWizard_rdomd5_description=The MD5 algorithm (published in 1992 and specified in RFC 1321) takes as input a message of arbitrary length and produces as output a 128-bit "fingerprint" or "message digest". The MD5 algorithm is intended for digital signature applications, where a large file must be "compressed" in a secure manner before the hash value will be signed with the private key (using a public-key cryptosystem like RSA).
HashWizard_rdosha1_description=The \u201CSecure Hash Algorithm\u201C (published in 1995 by the United States NIST) computes a condensed representation of a message or a data file. When a message of any length < 2\u2076\u2074 bits is input, the SHA-1 produces a 160-bit output. The SHA-1 is called secure because it was computationally infeasible to find a message which corresponds to a given message digest, or to find two different messages which produce the same message digest. Any change to a message in transit will, with very high probability, result in a different message digest, and the signature will fail to verify. 
HashWizard_rdosha256_description=SHA-256 is one of the successor hash functions to SHA-1 (collectively referred to as SHA-2), and is one of the strongest hash functions available. While SHA-1 has not been compromised in real-world conditions (however in theory), SHA-256 is not much more complex to code. It is recommended to use this method instead of SHA-1.
HashWizard_rdosha384_description=SHA-384 is like SHA-512, but they differ in the size of the hash value (SHA-384 is truncated). The initial hash is calculated from the 64 decimal bits of the square roots of the consecutive primes (23, 29, etc.). In the end only the first six 64-bit words from the result are used. The attached number indicates the length of each hash value (in bits). 
HashWizard_rdosha512_description=SHA-256 and SHA-512 differ in the word size. SHA-256 uses 32-bit words where SHA-512 uses 64-bit words. The attached number indicates the length of each hash value (in bits).
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1. Don't change those!!!!!!
HashWizard_rdomd5=MD5
#MD5 only with RSA
HashWizard_rdosha1=SHA-1
HashWizard_rdosha256=SHA-256
HashWizard_rdosha384=SHA-384
HashWizard_rdosha512=SHA-512
#SignatureWizard
#Group box 1 text
SignatureWizard_header=Select the signature method you want to use.
SignatureWizard_grpSignatures=Signature methods
#Group box 2 text
SignatureWizard_WindowTitle=Select the signature method
SignatureWizard_grpDescription=Description
SignatureWizard_Usage=The drop-down box dynamically only shows keys which support the chosen signature method (here\u0020
SignatureWizard_Usage2=). Each key is assigned to an identity. \n\n
SignatureWizard_DSA_description=The Digital Signature Algorithm (DSA) (published by the NIST in 1991) is a United States Federal Government standard for digital signatures. Entropy, secrecy, and uniqueness of the random parameter k are critical for the security of DSA. It is so critical that violating any one of those three requirements can reveal the entire private key to an attacker. Using the same value twice (even while keeping random signature value secret), using a predictable value, or leaking even a few bits of random signature value in each of several signatures, is enough to break DSA.
SignatureWizard_RSA_description=RSA (the algorithm was published in 1977) is an algorithm for public-key cryptography that is based on the presumed difficulty of factoring large integers, the factoring problem. Anyone can use the public key for verifying a message, but only the owner of the private key can sign the message. An attacker who does not know the private key, would have to factorize the modulus in the public key. Secure padding schemes such as RSA-PSS are as essential for the security of message signing as they are for message encryption. The cryptography standard PKCS #1 provides recommendations for the implementation of public-key cryptography based on the RSA algorithm.
SignatureWizard_ECDSA_description=The Elliptic Curve Digital Signature Algorithm (ECDSA) (proposed in 1992 by Scott Vanstone) is the elliptic curve analog of the Digital Signature Algorithm (DSA). Unlike the ordinary discrete logarithm problem and the integer factorization problem, no sub exponential-time algorithm is known for the elliptic curve discrete logarithm problem. The size of a private key that is considered secure is much smaller with ECDSA. At a security level of 80 bits, meaning an attacker requires the equivalent of about 2^80 signature generations to find the private key, the size of a DSA public key is at least 1024 bits, whereas the size of an ECDSA public key would be 160 bits.
SignatureWizard_RSAandMGF1_description=MGF (mask generation functions) functions take an octet string of a variable length and generate an octet string of a desired length. MGFs are deterministic, which means that the input octet string completely determines the output one. The output of an MGF should be pseudorandom, that is, infeasible to predict. That is why one-way hash functions is one of the well-known ways to implement an MGF. MGF 1 is specified in the PKCS #1 v2.1 standard (Public-Key Cryptography Standards, published by RSA Laboratories). (Source: http://software.intel.com/sites/products/documentation/doclib/ipp_sa/71/ippcp/ippcp_ch3/ch3_mask_generation_functions.htm)
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1
SignatureWizard_DSA=DSA
#MD5 only with RSA
SignatureWizard_RSA=RSA
SignatureWizard_ECDSA=ECDSA
SignatureWizard_RSAandMGF1=RSA and MGF1
#SignatureWizard_rdosha512=SHA-512
SignatureWizard_labelCurve=Select a curve:
SignatureWizard_labelKey=Select a key:
#InputWizard
InputWizard_WarningTitle=Warning
InputWizard_WarningMessageEmpty=The chosen file appears to be empty. Please choose another file.
InputWizard_WarningMessageTooLarge=The chosen file is too large. Please choose another file.
#Page 1
InputWizard_WindowTitle=Select input
InputWizard_title=Choose the input you like to sign
InputWizard_header=Please choose whether you want to open an existing document or enter a text.
InputWizard_rdoFromFile=From file
InputWizard_rdoFromEditor=Direct input
InputWizard_FileOpenDialog=Open file
#Page 2
InputFileWizard_WindowTitle=Select input
InputFileWizard_title=Choose a file
InputFileWizard_header=Please select the file you want to use for this demonstration. You can choose any file type you want, but the current maximum file size is
InputFileWirard_btnBrowse=Browse
#Page 3
InputEditorWizard_WindowTitle=Select input
InputEditorWizard_title=Enter text
InputEditorWizard_header=Please enter the text you want to sign.
InputEditorWizard_Label=Click "Finish" to save the text and continue.

HashWizard_Title=Select hash method
SignatureWizard_Title=Select signature method
InputWizard_Title=Select input

#Show generated signature
ShowSig_title=Show generated signature
ShowSig_ownerTitle=Owner of signature: 
ShowSig_keyTitle=Used key/curve: 
ShowSig_methodTitle=Signature method: 

ShowSig_grpSignature=Signature
ShowSig_lengthSig=Length of signature: 

ShowSig_grpOption=Display options for the signature
ShowSig_dispOpt=Number representation: 
ShowSig_octal=Octal
ShowSig_decimal=Decimal
ShowSig_hex=Hex
ShowSig_hexDump=Hex dump (hex and ascii)

ShowSig_grpMessage=Signed message
ShowSig_grpMessage_first10kB=\u0020(only the first 1024 bytes are shown)
ShowSig_lengthMessage=Length of signed message: 

ShowSig_editorDescripton=To store the signature and the according message in a file, click on "Save". The suggested name is "signature_and_message.bin". You can open the saved file with the hex editor in JCT.
ShowSig_randomizedMethods=Some singature methods (like DSA, ECDSA, MGF1) are randomized. Therefore, two successively created signatures of the same message usually differ from each other.

ShowSig_btnOpen=Open in hex editor
ShowSig_btnClose=Close

ShowSig_tblAdr=Address
ShowSig_tblHex=Hex
ShowSig_tblAscii=Ascii

ShowSig_btnSave=Save
ShowSig_MessageBoxTitle=Info
ShowSig_MessageBoxText=The file was saved successfully! \nFile path:

Wizard_menu=Select all
#Mouseover Texts
Visual.name.0=Signature Creation
view.name.0=Signature Creation

#ContextMenu
ShowSig_ContextCopy=Copy
ShowSig_ContextCopySelection=Copy selected line
ShowSig_ContexstCopyAll=Copy table