DefinitionAndDetails_0=Definitions and notations
DefinitionAndDetails_1=We arrange the n users in a tree with several levels, such that there are three top nodes, and each node on a certain level spawns four children on the next level.
DefinitionAndDetails_10=Additional notations:\n
DefinitionAndDetails_11=R(i) = s(i) Q'; for given s(i) in GF(l).\n
DefinitionAndDetails_12=Pair(i_1, i_2) = e(R(i_1), S(i_2)) or e(R(i_2), S(i_1)), depending on PK scheme.
DefinitionAndDetails_13=In the illustration, we have:\n
DefinitionAndDetails_14=m(i) = (U(i)|1|Z(i)|Sg(i)), with:\n
DefinitionAndDetails_15=Sg(i) = Sign(U(i)|1|Z(i)|r(1)|...|r(n), S(i)).\n
DefinitionAndDetails_16=Uj_Authenticated = Verify(m(j), P(j)), j different from i.\n
DefinitionAndDetails_17=Details
DefinitionAndDetails_18=User i =
DefinitionAndDetails_19=PK(i) = Z(i)
DefinitionAndDetails_2=We denote for U(i):\n
DefinitionAndDetails_20=\nMessages have the form: (U(i)|j|X(i,j)|Sg(i,j)), with j = 2,3, X(i, j) = X(leftchildren(i)) if j=2 and X(rightchildren(i)) if j = 3, and Sg(i,j)=Sign(U(i)|j|X(i, j)|R(1)...R(n).\n
DefinitionAndDetails_21=The other users do Verify(Sg(i), P(i)) and can then use X(i).
DefinitionAndDetails_22=PK(i) = Z(i), R(i) or {Z(i), R(i)}
DefinitionAndDetails_23=\nMessages have the form: (U(i)|1|PK(i)|Sg(i)), with Sg(i)=Sign(U(i)|1|PK(i)|R(1)...R(n)).\n
DefinitionAndDetails_24=The other users do Verify(Sg(i), P(i)) and can then use PK(i).
DefinitionAndDetails_29=In the illustration, we have:\n
DefinitionAndDetails_3=Parent(U(i)) = U(floor(i/4)) if i>3; intuitively, the parent of each child node.\n
DefinitionAndDetails_30=m(n + 2i-1) = (U(i)|2|X_{lc}(i)|Sg(lc, i)), with:\n
DefinitionAndDetails_31=m(n + 2i) = (U(i)|3|X_{rc}(i)|Sg(rc, i)), with:\n
DefinitionAndDetails_32=Sg(m, i) = Sign(U(i)|d|X_{m}(i)|r(1)|...|r(n), S(m, i));  d=2,3; m=lc, rc.\n
DefinitionAndDetails_33=Uj_Authenticated = Verify(m(n+j), P(j)), j different from i.
DefinitionAndDetails_34=In the illustration, we have:\n
DefinitionAndDetails_35=K(i) = e(Z(parent(i)), Z(sibling(i)))^(s(i)) Product_(j in Anc(i)) X(j).
DefinitionAndDetails_4=Left children of U(i) = {U(4i+2), U(4i+3)}; we count left and right looking from the outside inwards.\n
DefinitionAndDetails_5=Right children of U(i) = {U(4i), U(4i+1)}.\n
DefinitionAndDetails_6=Sibling(U(i)) = other child of U(i) from the same branch.\n
DefinitionAndDetails_7=For U(1) = parent(U(1)) = U(2); sibling(U(1)) = U(3).\n
DefinitionAndDetails_8=For U(2) = parent(U(2)) = U(3); sibling(U(2)) = U(1).\n
DefinitionAndDetails_9=For U(3) = parent(U(3)) = U(1); sibling(U(3)) = U(2).
Illustration_0=Protocol
Illustration_1=Step 1
Illustration_10=The ATTACKER can't find s(i) knowing s(i)P.
Illustration_11=\nUSER i easily computes the X of its children with s(i).\n
Illustration_12=The ATTACKER can't extract s(i) knowing X.
Illustration_13=Broadcast X(i)
Illustration_14=Step 4 (visualized)
Illustration_15=Each user i computes K(i) = e(Z(parent(i)), Z(sibling(i)))^(s(i)) Product_(j in Anc(i)) X(j) mod q.\n
Illustration_16=USER i easily computes the key with its s(i).\n
Illustration_17=The ATTACKER can't extract s(i) and can't compute the key.
Illustration_18=Compute conference key K 
Illustration_19=Step 5 (visualized)
Illustration_2=Each user i chooses S(i), P(i), r(i) for authentication.
Illustration_20=Verify that all keys are the same.
Illustration_21=Verify
Illustration_22=Each user i chooses s(i); computes Z(i) = s(i) P;
Illustration_23=Users U(i) apart from the leaves computes X(leftchildren(i)) = (e(Z(parent(i)), Z(sibling(i))/e(Z(leftchild1(i)), Z(leftchild2(i))))^s(i) mod q \n
Illustration_24=and X(rightchildren(i)) = (e(Z(parent(i)), Z(sibling(i))/e(Z(rightchild1(i)), Z(rightchild2(i))))^s(i) mod q.
Illustration_25=Each user i computes K(i) = e(Z(parent(i)), Z(sibling(i)))^(s(i)) Product_(j in Anc(i)) X(j) mod q.
Illustration_26=Each user i chooses s(i); computes Z(i) = s(i) P and/or R(i) = s(i)Q'.
Illustration_27=Users U(i) apart from the leaves computes X(leftchildren(i)) = (pair(parent(i), sibling(i))/pair(leftchild1(i), leftchild2(i)))^s(i) mod q \n
Illustration_28=and X(rightchildren(i)) = (pair(parent(i), sibling(i)/pair(rightchild1(i), rightchild2(i)))^s(i) mod q.
Illustration_29=Each user i computes K(i) = pair(parent(i), sibling(i))^s(i) Product_(j in Anc(i)) X(j) mod q.
Illustration_3=Generate
Illustration_4=Step 2 (visualized)
Illustration_5=Each user i chooses s(i)\nThe USER can easily compute PK(i) from s(i).\nThe ATTACKER can't find s(i) knowing s(i)P.
Illustration_6=Broadcast PK(i)
Illustration_7=Step 3 (visualized)
Illustration_8=Users U(i) apart from the leaves computes X(leftchildren(i)) = (e(Z(parent(i)), Z(sibling(i))/e(Z(leftchild1(i)), Z(leftchild2(i))))^s(i) mod q\n
Illustration_9=and X(rightchildren(i)) = (e(Z(parent(i)), Z(sibling(i))/e(Z(rightchild1(i)), Z(rightchild2(i))))^s(i) mod q.\n
IntroductionAndParameters_0=Multipartite Key Exchange
IntroductionAndParameters_1=More than 3 users wish to communicate securely over the Internet. They want to use symmetric encryption. For this, they first need to exchange a common conference key. This can be done with pairings. Pairings are bilinear, nondegenerate functions e that map two elliptic curve points (P,Q) to a finite field element k. The n users may choose between several types of pairings, depending on the desired security specifications. This is an enhancement of the Diffie-Hellman key exchange protocol.
IntroductionAndParameters_16=Initial settings (for the JCT user)
IntroductionAndParameters_17=Embedding degree k
IntroductionAndParameters_18=12 (smaller parameters)
IntroductionAndParameters_19=2 (large parameters)
IntroductionAndParameters_20=Level of security
IntroductionAndParameters_21=Pen and paper (8 bit = faster)
IntroductionAndParameters_22=Industrial security (512 bit = slower)
IntroductionAndParameters_23=Number of users n>3:
IntroductionAndParameters_24=Independent of the selected number of users the illustration below can only show 15 users at a time.
IntroductionAndParameters_25=Pairing type
IntroductionAndParameters_26=Tate pairing (faster)
IntroductionAndParameters_27=Weil pairing (slower)
IntroductionAndParameters_28=pairing such that e(P, P) \!= 1
IntroductionAndParameters_29=pairing such that e(P, P) \!= 1
IntroductionAndParameters_49=\ (hex), customization parameter
IntroductionAndParameters_50=36u^4 + 36u\u00b3 + 24u\u00b2 + 6u + 1, prime
IntroductionAndParameters_51=elliptic curve given by y\u00B2 = x\u00B3 + 3
IntroductionAndParameters_52=elliptic curve over GF(q^12), sextic twist of E.
IntroductionAndParameters_53=36u^4 + 36u\u00b3 + 18u\u00b2 + 6u + 1,  prime, l = \#E(GF(q))
IntroductionAndParameters_54=on E', order(Q') = l, gotten from Q on E, Q not in <P>
IntroductionAndParameters_55=12, the embedding degree
IntroductionAndParameters_56=pairing such that e(P, Q') \!= 1
IntroductionAndParameters_57=512-bit prime
IntroductionAndParameters_58=160-bit prime, l|\#E(GF(q))
IntroductionAndParameters_59=point on E, order(P) = l
IntroductionAndParameters_6=Summary initial parameters
IntroductionAndParameters_60=103
IntroductionAndParameters_61=13
IntroductionAndParameters_62=(26, 35)
IntroductionAndParameters_63=modified Tate pairing
IntroductionAndParameters_64=modified Weil pairing
Logging_0=Logging
Logging_1=In the last run, the user times are:
Logging_10=Log could not be saved\!\nPlease choose another location or file.
Logging_2=Time per burdened user
Logging_3=Time per unburdened user
Logging_4=Save results
Logging_6=Log.txt
Logging_7=Logging File (*.txt)
Logging_8=*.txt
Logging_9=File not found
