GUIHandler_strMissingP=Attention: p is missing
GUIHandler_strMissingQ=q is missing
GUIHandler_strNotSuitableN=Attention: N = p \u2219 q must be greater than 256
GUIHandler_strNumberRestriction=Attention: only numbers greater than 0 are allowed
GUIHandler_strPnotEqualQ=Attention: the condition p \u2260 q must be satisfied
GUIHandler_strPnotSuitable=Attention: p is not a suitable prime
GUIHandler_strQnotSuitable=Attention: q is not a suitable prime
GUIHandler_strUpperLimitRestriction=Attention: only an upper limit of 2^{0} is allowed
HandleFirstTab_strAppropriatePrimesWarning=Attention: could not find appropriate primes p and q.\nPlease try again or use other limits for p and q
HandleFirstTab_strGenKeyPairFT=Attention: you have to generate a key pair in the Algorithm tab first
HandleFirstTab_strLengthCipher=Attention: the length of the chosen ciphertext has to be a multiple of the\nblocklength = {0} Byte
HandleFirstTab_strLoadTextWarning=Attention: make sure to click on "Load text ..." and enter a text you want to encrypt/decrypt
HandleFirstTab_strLowerLimitLessUpperLimit=Attention: the condition lower limit < upper limit must be satisfied
HandleFirstTab_strOnlyDecAllowed=Attention: only decimal numbers (1-9) and an expression of the form "2^(decimal number)" are allowed
HandleFirstTab_strOnlyHexAllowed=Attention: only hexadecimal numbers (0-f) are allowed in decryption mode.\nIt might be you want to encrypt a plaintext
HandleFirstTab_strUpperLimitRestriction=Attention: only an upper limit of 2^{0,number,#} is allowed
HandleSecondTab_rstc_getTxtMessageWarning=Attention: generate a private and public key first
#HandleSecondTab_strCipherLessN=Attention: there is one or more ciphertextblock c[i] with c[i] \u2265 N.\nThe condition c[i] < N must be satisfied
HandleSecondTab_strCipherLessN=Attention: there is at least one ciphertextblock which is greater than or equal to N, but all ciphertextblocks must be less than N
HandleSecondTab_strCipherMultipleBlocklength=Attention: the length of the entered ciphertext must be a multiple of the blocklength = {0} Byte
HandleSecondTab_strGenKeyPairInCryptosystemWarning=Attention: you have to generate a key pair in the Cryptosystem tab first
HandleSecondTab_strGenKeyPairST=Attention: please generate a private and public key first
HandleSecondTab_strInfoDecDecimalMode=To decrypt a ciphertext c[i] in "Decimal numbers" mode do the following:\n1) Enter a ciphertext in the field "Ciphertext in base 10 format seperated into segments ("||" as separator)"\nPay attention to enter the ciphertext in the format "decimal number" or "decimal number 1 || decimal number 2 || ..."\n2) Click on "Apply"\n3) Either Use the drop-down list or the buttons "c[i-1]" and "c[i+1]" to choose a ciphertext c[i]\n4) Click on "Compute square roots mod p and q"\n5) Click on "Compute y_p and y_q" to compute the inverse values of p and q for the Chinese Remainder Theorem (CRT)\n6) Click on "Compute v and w" to compute the intermediate values\n7) Click on "Compute all plaintexts" to compute all plaintexts using the CRT\n
HandleSecondTab_strInfoDecHexMode=To decrypt a ciphertext c[i] in "Hex" mode do the following:\n1) Enter a ciphertext in the field "Ciphertext in base 16 format" as a hexstring\n2) Click on "Apply"\n3) Either Use the drop-down list or the buttons "c[i-1]" and "c[i+1]" to choose a ciphertext c[i]\n4) Click on "Compute square roots mod p and q"\n5) Click on "Compute y_p and y_q" to compute the inverse values of p and q for the Chinese Remainder Theorem (CRT)\n6) Click on "Compute v and w" to compute the intermediate values\n7) Click on "Compute all plaintexts" to compute all plaintexts using the CRT\n
HandleSecondTab_strInfoEncDecimalMode=To encrypt a plaintext in "Decimal numbers" mode do the following:\n1) Enter a plaintext in the field "Plaintext seperated into segments ("||" as separator)".\nPay attention to enter the plaintext in the format "decimal number" or "decimal number 1 || decimal number 2 || ..."\n3) Click on "Encrypt"
HandleSecondTab_strInfoEncTextMode=To encrypt a plaintext in "Text" mode do the following:\n1) Select "Bytes per block" to choose how many bytes you want to encrypt at once\n2) Enter a plaintext in the field "Plaintext"\n3) Click on "Encrypt"
HandleSecondTab_strInfoSelectionEncryption=To decrypt a ciphertext c[i] do the following:\n1) Either Use the drop-down list or the buttons "c[i-1]" and "c[i+1]" to choose a ciphertext c[i]\n2) Click on "Compute square roots mod p and q"\n3) Click on "Compute y_p and y_q" to compute the inverse values of p and q for the Chinese Remainder Theorem (CRT)\n4) Click on "Compute v and w" to compute the intermediate values\n5) Click on "Compute all plaintexts" to compute all plaintexts using the CRT\nThe correct plaintext will be shown in the color green
HandleSecondTab_strNotValidPlaintext=Attention: not a valid plaintext. The plaintext has to be of the form "decimal number" or "decimal number 1 || decimal number 2 || ..."
HandleSecondTab_strOnlyHexNumbers=Attention: only hexadecimal numbers (0-f) are allowed
#HandleSecondTab_strPlessN=Attention: there exist one or more p[i] with p[i] \u2265 N, but the condition p[i] < N must be satisfied
HandleSecondTab_strPlessN=Attention: there exist at least one plaintext which is greater than or equal to N, but the all plaintexts must be greater than N
HandleSecondTab_strSelectBytesPerBlock=Attention: select "Bytes per block"
HandleThirdTab_strCouldNotFindPandQ=Attention: could not find appropriate primes p and q
#HandleThirdTab_strGenKeyPairTT=Attention: you have to generate a key pair in the Algorithm tab first
HandleThirdTab_strGenKeyPairTT=Attention: you have to generate a key pair in the Cryptosystem tab first
HandleThirdTab_strMaxBitlengthOfN=Attention: bitlength of N must be \u2264 {0} bits
HandleThirdTab_strNmustBeComposite=Attention: N must be a composite number
HandleThirdTab_strNmustBeOdd=Attention: N must be an odd number
#HandleThirdTab_strOnlyNumbersGreaterZero=Attention: only decimal numbers > 0 are allowed
HandleThirdTab_strOnlyNumbersGreaterZero=Attention: only decimal numbers greater than 0 are allowed
RabinFirstTabComposite_btnEncDecStart=Start
RabinFirstTabComposite_btnGenKeys=Generate private and public key using limits
RabinFirstTabComposite_btnGenKeysMan=Generate private and public key manually
RabinFirstTabComposite_btnRadDec=Decrypt
RabinFirstTabComposite_btnRadEnc=Encrypt
RabinFirstTabComposite_btnSelectMultiPandQ=Generate p and q having different ranges
RabinFirstTabComposite_btnSelectSingleLimit=Generate p and q having the same range
RabinFirstTabComposite_btnStartGenKeys=Start
RabinFirstTabComposite_btnUseKeysAlgo=Use private and public key generated in Algorithm tab
RabinFirstTabComposite_btnWriteToEditor=Write to file
RabinFirstTabComposite_genPComp=Prime p
RabinFirstTabComposite_genQComp=Prime q
RabinFirstTabComposite_grpEncDec=Encryption/Decryption
RabinFirstTabComposite_grpMessages=Possible plaintexts/Ciphertext
#RabinFirstTabComposite_grpParam=Setting parameters
RabinFirstTabComposite_grpParam=Generate private and public key
RabinFirstTabComposite_grpPlaintext=Plaintext
RabinFirstTabComposite_grpSelectSinglePandQ=Prime p and q
RabinFirstTabComposite_lblDescChooseText=Please select a plaintext/ciphertext for encryption/decryption.\nYou can either choose the JCT editor, using a manual input or choose a file.
RabinFirstTabComposite_nWarning=Attention: n is missing
RabinFirstTabComposite_pWarning=Attention: p is missing
RabinFirstTabComposite_qWarning=Attention: q is missing
RabinFirstTabComposite_strLowerLimit=Lower limit
RabinFirstTabComposite_strUpperLimit=Upper limit
RabinFirstTabComposite_txtInfoEncDec=Select encrypt/decrypt then click on "Start" to encrypt/decrypt the plaintext/ciphertext.\nIn case you decide to decrypt a ciphertext c only the first 5 blocks are decrypted\nand displayed due to a possible overhead of solutions.\nIn the table below you can see the possible solutions. Each column represents the ciphertext block c[i] and its possible four solutions.\nYou can select one plaintext and click on "Write to file" to write the plaintext to a file and displaying it in the JCT editor.
RabinFirstTabComposite_txtInfoSetParam=You have three possibilities to generate the p\u0155ivate key (p,q) and public key N:\n1) Enter p and q in the corresponding fields, select "Generate private and public key manually" and click on "Start".\n2) Enter a lower and an upper limit for both p and q by selecting either the button \"Generate p and q having the same range\" or \"Generate p and q having different ranges\". You are allowed to enter decimal numbers as well as numbers of the form "2^(decimal number)". Select "Generate private and public key" and click on "Start".\n3) Select "Use private and public key generated in Algorithm tab" and click on "Start".
#RabinMainView_compTadDescription=The Rabin cryptosystem is an asymmetric cryptosystem sharing similarities with the RSA cryptosystem. Its security is based on the difficulty of computing squareroots modulo a composite integer n and the integer factorization problem. The unique characteristic of the cryptosytem is that its decryption results in four possible plaintexts, of which only one is the correct one. The plugin demonstrates the Rabin encryption and decryption scheme with a chosen private key pair (p,q), where p and q are distinct prime numbers, and the public key N = p · q, which is used as the modulus.
RabinMainView_compTadDescription=The Rabin cryptosystem is an asymmetric cryptosystem sharing similarities with the RSA cryptosystem. The unique characteristic of the cryptosystem is that its decryption results in four possible plaintexts, of which only one is the correct one. The plugin demonstrates the Rabin encryption and decryption scheme with a chosen private key pair (p,q), where p and q are distinct prime numbers, and the public key N = p · q, which is used as the modulus.
RabinMainView_compTadTitle=Rabin Cryptosystem
RabinMainView_tabFirstItem=Cryptosystem
RabinMainView_tabSecondItem=Algorithm
RabinMainView_tabThirdItem=Attacks
RabinSecondTabComposite_btnApplyCiphertext=Apply
RabinSecondTabComposite_btnComputePt=Compute all plaintexts
RabinSecondTabComposite_btnComputevw=Compute v and w
RabinSecondTabComposite_btnComputeYpYq=Compute y_p and y_q
RabinSecondTabComposite_btnEnc=Encrypt
RabinSecondTabComposite_btnGenKeysAlgo=Use private and public key generated in Cryptosystem tab
RabinSecondTabComposite_btnGenKeysMan=Generate private and public key manually
RabinSecondTabComposite_btnNum=Decimal numbers
RabinSecondTabComposite_btnRadDecimal=Decimal numbers
RabinSecondTabComposite_btnRadHex=Hex
RabinSecondTabComposite_btnSelectionDec=Decryption
RabinSecondTabComposite_btnSelectionEnc=Encryption and decryption
RabinSecondTabComposite_btnSqrRoot=Compute square roots mod p and q
RabinSecondTabComposite_btnStartGenKeys=Start
RabinSecondTabComposite_btnText=Text
RabinSecondTabComposite_grpComputeIs=Compute v = y_p \u22C5 p \u22C5 m_q and w = y_q \u22C5 q \u22C5 m_p
#RabinSecondTabComposite_grpDec=Step 3 \u002d Decryption
RabinSecondTabComposite_grpDec=Decryption
RabinSecondTabComposite_grpLinCon=Compute y_p and y_q such that y_p * p + y_q * q = 1 using the Euclidean algorithm
RabinSecondTabComposite_grpParam=Step 1 \u002d Setting parameters
#RabinSecondTabComposite_grpPlaintext=Step 2 \u002d Encryption
RabinSecondTabComposite_grpPlaintext=Encryption
RabinSecondTabComposite_grpPosPlain=Compute all plaintexts
RabinSecondTabComposite_grpSqrRoot=Square roots of c modulo p and q
RabinSecondTabComposite_lblBlockN=Bytes per block
RabinSecondTabComposite_lblChoosCipher=Block (c[i])
RabinSecondTabComposite_lblCipher=Ciphertext c[i] = m[i]² mod N
RabinSecondTabComposite_lblCipherNum=Ciphertext c[i] = m[i]² mod N
RabinSecondTabComposite_lblEnterCiphertext=Ciphertext in base 16 format
RabinSecondTabComposite_lblm1=m\u2081 = v + w mod N = 
RabinSecondTabComposite_lblm2=m\u2082 = v \u2212 w mod N = 
RabinSecondTabComposite_lblm3=m\u2083 = w \u2212 v mod N = 
RabinSecondTabComposite_lblm4=m\u2084 = -v \u2212 w mod N = 
RabinSecondTabComposite_lblMessage=Plaintext
RabinSecondTabComposite_lblMp=m\u209A = c^((p+1)/4) mod p
RabinSecondTabComposite_lblMq=m_q = c^((q+1)/4) mod q
RabinSecondTabComposite_nWarning=Attention: n is missing
RabinSecondTabComposite_pWarning=Attention: p is missing
RabinSecondTabComposite_qWarning=Attention: q is missing
#RabinSecondTabComposite_strCipherInBase10=Ciphertext in base 10 format separated into segments ("{0}" as separator)
#RabinSecondTabComposite_strCipherInBase16=Ciphertext in base 16 format separated into segments ("{0}" as separator)
#RabinSecondTabComposite_strCipherIntoSegments=Ciphertext separated into segments ("{0}" as separator)
#RabinSecondTabComposite_strPlainInBase16=Plaintext in base 16 format separated into segments ("{0}" as separator)
#RabinSecondTabComposite_strPlaintextSeparatedIntoSegments=Plaintext separated into segments ("{0}" as separator)
RabinSecondTabComposite_strCipherInBase10=Ciphertext in decimal format separated into blocks ("{0}" as separator)
RabinSecondTabComposite_strCipherInBase16=Ciphertext in hex format separated into blocks ("{0}" as separator)
RabinSecondTabComposite_strCipherIntoSegments=Ciphertext separated into blocks ("{0}" as separator)
RabinSecondTabComposite_strPlainInBase16=Plaintext in hex format separated into blocks ("{0}" as separator)
RabinSecondTabComposite_strPlaintextSeparatedIntoSegments=Plaintext separated into blocks ("{0}" as separator)
RabinSecondTabComposite_txtInfoDec=To decrypt a ciphertext c[i] do the following:\n1) Either Use the drop-down list or the buttons "c[i-1]" and "c[i+1]" to choose a ciphertext c[i]\n2) Click on "Compute square roots mod p and q"\n3) Click on "Compute y_p and y_q" to compute the inverse values of p and q for the Chinese Remainder Theorem (CRT)\n4) Click on "Compute v and w" to compute the intermediate values\n5) Click on "Compute all plaintexts" to compute all plaintexts using the CRT\nThe correct plaintext will be shown in the color green
RabinSecondTabComposite_txtInfoEnc=To encrypt a plaintext in "Text" mode do the following:\n1) Select "Bytes per block" to choose how many bytes you want to encrypt at once\n2) Enter a plaintext in the field "Plaintext"\n3) Click on "Encrypt"
RabinSecondTabComposite_txtInfoGenKeysInfo=You have three possibilities to choose primes p and q:\n1) Enter p and q manually in the corresponding fields.\n1.1) Select "Generate private and public key manually" and click on "Start"\n2) Enter p and q using the drop down list\n2.1) Select "Generate private and public key manually" and click on "Start"\n3) Select "Use private and public key generated in Cryptosystem tab"\n3.1) Click on "Start"
RabinThirdTabComposite_btnFactorize=Factorize
RabinThirdTabComposite_btnGenKeysAlgo=Use public key N generated in Algorithm tab
RabinThirdTabComposite_btnGenKeysMan=Generate public key N manually
RabinThirdTabComposite_btnSelPollard=Pollard's rho factorization
RabinThirdTabComposite_btnStartGen=Apply
RabinThirdTabComposite_grpFactor=Factorization
RabinThirdTabComposite_grpFermat=Fermat factorization
RabinThirdTabComposite_grpResult=Result
RabinThirdTabComposite_grpSetParam=Setting parameters
RabinThirdTabComposite_lblpPollard=p = gcd(|x \u2212 y|, N) =  
RabinThirdTabComposite_txtInfoFactor=To factorize a public key N do the following:\n1) Either enter N in the corresponding field or click on \"Use public key N generated in Algorithm tab\"\n2) Click on \"Factorize\"
RabinThirdTabComposite_txtInfoFactorPollard=To factorize a public key N do the following:\n1) Enter N, x, y, c with 0 < x, y, c < N in the corresponding fields. You can also use the button "Use public key N generated in Algorithm tab"\n2) Click on "Factorize"
