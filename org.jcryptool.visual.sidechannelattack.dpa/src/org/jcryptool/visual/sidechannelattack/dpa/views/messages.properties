Constants_10=Double and Add
Constants_100=x + 
Constants_101=\n   GF(
Constants_102=), a \= 
Constants_103=, b \= 
Constants_104=\n   Initial EC point P\: 
Constants_105=\n   Parameter k\: 
Constants_106=\n   k in binary\: 
Constants_107=\n\nRandomization\:\n   
Constants_108=Random factor r \= 
Constants_109=\n   a' \= a*r\u2074 \= 
Constants_11=Double and Add Always\:\nThis method adds a 'dummy' computation. After each double it follows an add operation, even if this isn't needed. Further computations will use the previous result if a dummy operation was used. The extra operation protects the computation against SPA attacks. However, this method is still vulnerable against DPA attacks since differential analysis can extract the private key.
Constants_110=, b' \= b*r\u2076 \= 
Constants_111=\n   P' \= (r\u00B2*Xp, r\u00B3*Yp) \= (
Constants_112=\n   EC'\: y\u00B2 \= x\u00B3 + a'x + b' 
Constants_113=\n            \= x\u00B3 + 
Constants_114=x + 
Constants_115=. highest bit\: 
Constants_116=Q \:\= 2Q \= 
Constants_117=P \= (
Constants_118=Q \:\= Q + P \= 
Constants_12=Parameter k Randomization\:\nif the scalar multiplier k is randomized in each turn of execution, the attacker could not recover the private key per comparison the differences between the power traces analysis of "double and add" operations.\n\nThe idea and principle are like so\:\nFirst choose a random factor between 1 and p -1, then a new randomized scalar multiplier k' \= k + r*ord(P) will be calculated.\nSince ord(P)*P is the infinity point(0) of the chosen elliptic curve, we get\:\nG' \= (k + r*ord(P))*P \= k*P + r*(ord(P)*P) \=\nk*P + r*0 \= G\nWith such method even for the same private key k, the power traces are still ensured to be different. The relation between certain input parameter k and corresponding power trace during operation process will be broken.
Constants_120=Q \:\= 2Q \= 
Constants_121=Input\:
Constants_122=Q \:\= 2Q
Constants_123=Q \:\= Q + P
Constants_124=Q  \= Q + P \= 
Constants_125=Q' \= 2Q' \= 
Constants_126=(P + R) \= (
Constants_127=Q'  \= Q' + (P + R) \= 
Constants_128=P' \= (
Constants_129=Q'  \= Q' + P' \= 
Constants_131=Q' \= k*(P+R) \= Q + S \= 
Constants_132=S \= (x, y) then -S \= (x, -y) \= 
Constants_133=Q \= Q' - S \= Q' + (-S)
Constants_134=Q \= (
Constants_135=Q' \= (Xq*r\u00B2,Yq*r\u00B3) \= 
Constants_136=\u0304
Constants_137=\u00B2
Constants_138=\u00B3
Constants_14=Initial Point P Randomization\:\nif the initial point P is randomized in each turn of execution, it is also difficult to recover the private key through analysis of the correlation between a certain k*P and its power trace.\n\nBasic idea and principle\:\nFirst we choose randomly another EC point R on the same EC which is different from the initial EC point. Then we calculate R+P \= P' as the new initial EC point for EC cryptography. After the "Double and Add Always" algorithm we get Q' \= k*P' \= k(P + R) \= k*P + k*R \= Q + k*R as the result.\nAnd for an EC point satisfies S \= (x,y) then -S \= (x,-y), thus Q \= Q' - k*R \= Q' + (-k*R), with this method we can calculate the result Q but concealing the real initial point P, in this way the correlation between power traces and the initial input P is also concealed.
Constants_147=Xq \= 
Constants_148=Yq \= 
Constants_15=Isomorphic Curve Randomization\:\nWe use a random isomorphic curve to the original curve and after "Double and Add always" we recover the original result Q from Q'. The random isomorphic curve could also be understand as a DPA countermeasure with the method of randomizing the initial point P.\n\nIdea and process\:\nFirst we choose randomly a number r between 1 and p - 1 and then we calculate a' \= r\u2074a, b' \= r\u2076b P' \= (r\u00B2Xp, r\u00B3Yp). With new a', b', P' we get a new isomorphic curve\: E'\: y\u00B2 \= x\u00B3 + a'*x + b' After that we compute Q' \= k*P' on the new isomorphic curve. Q' \= (Xq',Yq'). Finally we recover Q \=(r\u207B\u00B2Xq',r\u207B\u00B3Yq'). Actually the method 'isomorphic curve' breaks the correlation between EC point and power traces of different operations through randomizing the initial point.
Constants_16=Randomize Parameter k
Constants_17=Randomize initial EC point P
Constants_18=Random Isomorphic Curve
Constants_19=1. Q \= KP at step j the processed point Q depends only on the first bits (kn-2,kn-3; \: \: \: ; kj ) of K.\n\n2. Power consumption will be correlated to specific bit of Q, no correlation will be observed with a point not computed.\n\n3. The 2th most significant bit kn-2 of K can be recovered by computing the correlation between power consumption and any specific bit of the binary representation of 6P.\n\n 4. If kn-1 \= 1, 6P is computed as Q \= 2*3P \= 6P, otherwise by kn-1 \= 0, 2*2P will be carried out during the Double operation.\n\n5. We gather many power consumption of computing 6P, and let si be any specific bit of 6P. We use the correlation function\: g(t) \= Power(si \= 0) - Power(si \= 1).\n\n6. If 6P is related to simulated correlation function g(t), a peak is observed corresponding to the computation of 6P, otherwise if there is no peak, the second significant bit is 0.\n\n7. The following bits kn-3, kn-4,... kj of K can be recursively recovered in the same way.\n\n8. The countermeasures against DPA are randomizing either the Initial Point P or the scalar multiplier K.
Constants_20=Double and Add Always
Constants_22=choose the parameter a of the EC here
Constants_23=choose the parameter b of the EC here
Constants_24=order of the selected EC, that means the number of EC points on the curve plus the infinity point O
Constants_25=select the scalar multiplier k for Q \= kP here
Constants_26=choose an EC point P as initial Point of ECC, except the infinity point O 
Constants_27=Perform computations
Constants_28=the order of selected initial point P, which means the minimum number k in GF(p) which satisfied kP \= infinity point
Constants_29=choose the prime field GF(p) here
Constants_33=a \=
Constants_34=b \= 
Constants_35=the EC has been selected with parameter a, b and GF(p)
Constants_36=Q' \= 2Q'
Constants_37=Q' \= Q' + P
Constants_38=k in binary\: 
Constants_39=Input
Constants_42=
Constants_43=Result after double
Constants_44=Result after add
Constants_46=GF(p) \=
Constants_47=y\u00B2 \= x\u00B3 + 
Constants_48=x + 
Constants_49=, GF(
Constants_50=a, b must be set in GF(p).
Constants_55=Order of P
Constants_59=
Constants_6=Information
Constants_60=k in binary\: 
Constants_61=
Constants_62=Process\: 
Constants_63=Input\:
Constants_64=Q \:\= 2Q
Constants_65=Q \:\= Q + P
Constants_66=Countermeasure\: Parameter k Randomization\n\n
Constants_67=Original Input\:\n   Elliptic Curve\: y\u00B2 \= x\u00B3 + 
Constants_68=\n   GF(
Constants_69=), a \= 
Constants_7=First, choose a mode. The first entry is used for regular EC computations using the 'Double and Add' algorithm. 'Double and Always Add' is an extention of Double and Add which provides protection against a 'Simple power attack' (SPA). The remaining entries randomizes various parameters of the EC which provides protection against DPA. These methods are used in combination with Double and add Always.\nFirst, choose the EC parameters then the EC points and click "Execute". Try the different methods\!
Constants_70=, b \= 
Constants_71=\n   Initial EC point P\: 
Constants_72=\n   Parameter k\: 
Constants_73=\n   k in binary\: 
Constants_74=\n\nRandomization\:\n   Random factor r\: 
Constants_75=\n   Order of P ord(P)\: 
Constants_76=\n   k' \= k + ord(P)*r \= 
Constants_77=\n   k' in binary\: 
Constants_78=Random EC point R\: (
Constants_79=S \= k*R \= 
Constants_80=R \= 
Constants_81=Countermeasure\: Initial Point P Randomization\n\n
Constants_82=Original Input\:\n   Elliptic Curve\: y\u00B2 \= x\u00B3 + 
Constants_83=x + 
Constants_84=\n   GF(
Constants_85=), a \= 
Constants_86=, b \= 
Constants_87=\n   Initial EC point P\: 
Constants_88=\n   Parameter k\: 
Constants_89=\n   k in binary\: 
Constants_9=Double and Add\:\nThis algorithm is the common one for computations with ECs. However, this method is vulnerable against DPA and SPA as the power traces offers information about the used operation (double or add). An attacker can reconstruct the binary representation of the pivate key without further analysis.
Constants_90=\n\nRandomization\:\n   
Constants_91=Random EC point R\: (
Constants_92=\n   P + R \= 
Constants_93=\n   S \= k*R \= 
Constants_94=R \= 
Constants_95=\n   Q' \= k*(P+R) \= Q + S
Constants_96=\nInverse\: -S \= (x,-y)
Constants_97=\n   Q \= Q' - S \= Q' + (-S)
Constants_98=Countermeasure\: Random Isomorphic Curve\n\n
Constants_99=Original Input\:\n   Elliptic Curve\: y\u00B2 \= x\u00B3 + 
DPAView_0=This Plug-in presents different ways to protect 'Elliptic Curve' (EC) cryptography against 'Differential Power Analysis' (DPA).
DPAView_lblNewLabel_2_text=About the plug-in
DPAView_lblNewLabel_3_text=About the mode
DPAView_lblNewLabel_4_text=Computation of the Randomization
Title=Differential Power Analysis (DPA) with Elliptic Curves
curve=Curve:
k=k' in binary
mode=Mode
noprotection0=The 'Double and Add' mode offers no protection against DPA. You can choose a different mode which offers randomization to compute randomized parameters in order to provide protection against DPA.
noprotection1=The 'Double and Add Always' mode offers no protection against DPA. You can choose a different mode which offers randomization to compute randomized parameters in order to provide protection against DPA.
order_curve=Order of curve
outputtable=Output table
parameter=Parameters of EC
points=Points on EC
protection=Press 'Execute' to calculate the randomized values
reset=Reset
result=Output
