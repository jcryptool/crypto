ExtendedRSA_Visual_1=Alice Whitehat
ExtendedRSA_Visual_10=Explanations
ExtendedRSA_Visual_11=RSA
ExtendedRSA_Visual_12=1234
ExtendedRSA_Visual_13=MpRSA
ExtendedRSA_Visual_14=RSA
ExtendedRSA_Visual_15=MpRSA
ExtendedRSA_Visual_16=1234
ExtendedRSA_Visual_17=RSA
ExtendedRSA_Visual_18=1234
ExtendedRSA_Visual_19=none
ExtendedRSA_Visual_2=Bob Whitehat
ExtendedRSA_Visual_20=unknown
ExtendedRSA_Visual_21=RSA
ExtendedRSA_Visual_22=1234
ExtendedRSA_Visual_23=MpRSA
ExtendedRSA_Visual_24=RSA
ExtendedRSA_Visual_25=MpRSA
ExtendedRSA_Visual_26=1234
ExtendedRSA_Visual_27=RSA
ExtendedRSA_Visual_28=1234
ExtendedRSA_Visual_29=none
ExtendedRSA_Visual_3=\ 
ExtendedRSA_Visual_30=unknown
ExtendedRSA_Visual_4=Extended RSA Cryptosystem (including identities and multi-prime RSA)
ExtendedRSA_Visual_5=This visualization demonstrates the usage of RSA for message encryption. You can incorporate different identities, like \u201EAlice Whitehat\u201C, and encrypt messages for other identities like \u201EBob Whitehat\u201C which only he is able to decrypt again. \u201EBob Whitehat\u201C can do the same with messages for \u201EAlice Whitehat\u201C. You can also add other identities to see how RSA message encryption works with multiple participants.
ExtendedRSA_Visual_6=Identity management
ExtendedRSA_Visual_7=Create new identity
ExtendedRSA_Visual_8=Show/Hide identity
ExtendedRSA_Visual_9=Delete identity
Identity_0=The identities of your key store are shown as tabs in this plugin. By default, the identities \u201EAlice Whitehat\u201C and \u201EBob Whitehat\u201C are already set up in your key store. So these are the initial tabs in this view.\n\nEach tab represents an identity. With the button \u201EShow/Hide Identity\u201C you can either display or hide existing identities. Newly created identities can be activated with this button and will be shown in the visual.\n\nNote: This area will display further details on the actions selected.
Identity_1=Action: Encrypt and send message\n\nFor encrypting a message, the parameters N and e are required. To get more information on the parameters, see the tab \u201EMy keys\u201C in \u201EManage keys\u201C.\n\nHow to encrypt and send a message:\n\n1) Enter an optional subject and a mandatory message.\n\n2) Select a recipient (\u201EBob Whitehat\u201C e.g.). Note: In this visual only one recipient is allowed.\n\n3) Select the recipient\u2019s public key to be used for encryption.\n\n4) Press the button \u201EEncrypt message\u201C.\n\n5) Press the button \u201ESend message\u201C to send the encrypted message and save it to the message store.
Identity_10=Select two different prime numbers p and q, and an exponent e:
Identity_100=p
Identity_101=q
Identity_102=r
Identity_103=d
Identity_104=e
Identity_105=N
Identity_106=algorithm
Identity_107=format
Identity_108=p
Identity_109=q
Identity_11=Select three different prime numbers p, q, r and an exponent e:
Identity_110=r
Identity_111=s
Identity_112=d
Identity_113=e
Identity_114=N
Identity_115=algorithm
Identity_116=format
Identity_117=p
Identity_118=q
Identity_119=r
Identity_12=Select four different prime numbers p, q, r, s and an exponent e:
Identity_120=s
Identity_121=t
Identity_122=d
Identity_123=e
Identity_124=N
Identity_125=Enter password:
Identity_126=Attention: This identity doen't have keys at the moment.
Identity_127=Parameter
Identity_128=Value
Identity_129=Manage keys
Identity_13=Select five different prime numbers p, q, r, s, t and an exponent e:
Identity_130=Select a public key:: 
Identity_131=Press the button "Attack key" to try a factorizing-attack on the modulus N of 
Identity_132=(bit length of N:
Identity_133=bit):
Identity_134=Attack key
Identity_135=Parameter
Identity_136=Value
Identity_137=Attack public key
Identity_138=Display results
Identity_139=\nThe factorization was successful. The following values were reconstructed in 
Identity_14=Here you can create new keys with typically uses key lengths:
Identity_140=p
Identity_141=q
Identity_142=p
Identity_143=q
Identity_144=r
Identity_145=p
Identity_146=q
Identity_147=r
Identity_148=s
Identity_149=p
Identity_15=Here you can display your key pairs and the public keys of all your takers.\n\nHint: To display a private key, you have to enter the password for that key. The display of public keys requires no password.
#Identity_15=Here you can display your key pairs and the public keys of all your takers.\nHint: To display a private key, you have to enter the password for that key. The display of public keys requires no password.
Identity_150=q
Identity_151=r
Identity_152=s
Identity_153=t
Identity_154=e
Identity_155=d
Identity_159=No subject
Identity_16=Attention: No encrypted messages available.
Identity_160=3
Identity_161=65537
Identity_162=Action window
Identity_163=Please choose an action for the current identity (
Identity_164=), or add or display further identities in the area \u201EIdentity management\u201C.
Identity_165=Action window
Identity_166=Action window
Identity_167=Action window
Identity_168=17
Identity_169=Multi-prime RSA key was successfully created. The secret exponent d is: 
Identity_17=Attention: 'p' is no prime number\!
Identity_170=Multi-prime RSA key was successfully created. Please view the key details in the tab 'My keys' because of the size.
Identity_172=seconds:
Identity_173=N: 
Identity_174=Sender: 
Identity_175=Recipient: 
Identity_176=Reconstruct key
Identity_177=Classic RSA key successfully reconstructed with the password '1234' and added to the key store.
Identity_178=Multi-prime RSA key successfully reconstructed with the password '1234' and added to the key store.
Identity_179=Hint: The value of each selected parameter will be copied to the clipboard automatically.
Identity_18=Attention: 'q' is no prime number\!
Identity_180=Hint: The standard password for the private keys of Alice and Bob Whitehat or for factorized private keys is '1234'.
Identity_19=Attention: 'r' is no prime number\!
Identity_2=Action: Receive and decrypt message\n\nFor decrypting a message, the parameters N and d are needed. To get more information about the parameters, see the tab \u201EMy keys\u201C in \u201EManage keys\u201C.\n\nHow to encrypt and send a message:\n\n1) Select an arbitrary message from the message store.\n\n2) Select your private key and enter the password for that key.\n\n3) Press the button \u201EDecrypt message\u201C. The message can only be decrypted correctly if the right key was chosen.\n\n4) Press the button \u201EDelete message\u201C to delete the encrypted message from the message store (only available for real recipient).
Identity_20=Attention: 's' is no prime number\!
Identity_21=Attention: 't' is no prime number\!
Identity_22=Attention: 'e' is no valid exponent ('e' has to be between 3 and phi(N) or rather 65537)\!
Identity_222=Attention: The 'gcd' of 'e' and 'phi(N)' is not 1 (the 'gcd' has to be 1)\!
Identity_23=Attention: Please enter different primes\!
Identity_24=Attention: Please enter primes which are bigger than 13\!
Identity_25=Attention: No attackable key found in the key store.
Identity_26=
Identity_27=\ - 
Identity_28=Actions:
Identity_29=Subject:
Identity_3=The messages was successfully saved in the message store. Now you can encrypt and send a new message or view the encrypted message at the recipient.
Identity_30=Message:
Identity_31=Encrypted message (hexadecimal representation):
Identity_32=Recipient:
Identity_33=Send message
Identity_34=Select key:
Identity_35=Encrypt message
Identity_36=Encrypt and send message
Identity_37=Select message:
Identity_38=Encrypted message (hexadecimal representation):
Identity_39=Decrypted message:
Identity_4=The message was irrecoverable deleted from the message store. If there are more messages in the identity's message store, you can watch them now. Alternatively you have to encrypt and send a new message to that identity.
Identity_40=Select key:
Identity_41=Delete message
Identity_42=Enter password:
Identity_43=Decrypt message
Identity_44=Receive and decrypt message
Identity_45=Create new key
Identity_46=RSA
Identity_47=p:
Identity_48=q:
Identity_49=e:
Identity_5=The entered password for the selected private key is wrong\!
Identity_50=Pick random 'e'
Identity_51=Multi-prime RSA
Identity_52=Number of primes (3-5):
Identity_53=p:
Identity_54=q:
Identity_55=r:
Identity_56=s:
Identity_57=t:
Identity_58=e:
Identity_59=Pick random 'e'
Identity_6=Action: Manage keys \u2013 Create new key\n\nHere, a new key can be created with chosen parameters. The RSA algorithm is implemented in two variants:\n\n1) For the classic RSA algorithm, two different prime numbers p and q are needed. These numbers can either be chosen, or can directly be entered. If p and q are valid, an exponent e can be chosen, entered or generated.\n\n2) For multi-prime RSA, first the number of primes (between 3 and 5) has to be entered. The parameters can then be specified like in the classic RSA algorithm.\n\nAt the end of the key generation a password for accessing the private key has to be set.\n\nPress the button \u201ECreate key\u201C to create a new key with the selected parameters and store it in the key store.
Identity_60=Enter password:
Identity_61=Repeat password:
Identity_62=Create key
Identity_63=Classic RSA key was successfully created. The secret exponent d is: 
Identity_64=.
Identity_65=Classic RSA key was successfully created. Please view the key details in the tab 'My keys' because of the size.
Identity_66=Create new key (extended)
Identity_67=RSA
Identity_68=Select key length:
Identity_69=1024
Identity_7=Action: Manage keys \u2013 Create new key (advanced)\n\nIn this tab a key with a selected key length can be created in contrast to the first tab, where the key length depends on the chosen parameters. You only need to select the desired key length and (in case of the multi-prime RSA) the number of primes you want to use.\n\nAt the end of the key generation a password for the private key has to be defined.\n\nPress the button \u201ECreate key\u201C to create a new key with the selected parameters and store it in the key store.
Identity_70=2048
Identity_71=Multi-prime RSA
Identity_72=Number of primes (3-5):
Identity_73=Select key length:
Identity_74=1024
Identity_75=2048
Identity_76=Enter password:
Identity_77=Repeat password:
Identity_78=Create key
Identity_79=RSA
Identity_8=Action: Manage keys \u2013 My keys\n\nA key pair consists of a \u201Eprivate\u201C and a \u201Epublic\u201C key.\n\na) The private key (N, d):\n - The modulus N is part of both the public and the private key.\n - The private exponent d is the secret part of the scheme and hence only contained in the private key. It is the result of the calculation e^(-1) modulo phi(N).\n\nb) The public key (N, e):\n - The modulus N is part both of the public of the private key\n - The public exponent e (usually between 17 and 65537) must be relatively prime to phi(N).\n\nFor the multi-prime RSA algorithm, more than two prime numbers can be chosen. In this plugin up to 5 primes can be used. In theory though, the number is not limited.
Identity_80=Classic RSA key was successfully created. Please view the key details in the tab 'My keys' because of the size.
Identity_81=My keys
Identity_82=Select keys:
Identity_83=PublicKey
Identity_84=View key details
Identity_85=Algorithm
Identity_86=Format
Identity_87=e
Identity_88=N
Identity_89=RSA
Identity_9=Action: Attack public key\n\nIn this tab you can try to attack a public key. If the modulus N is sufficiently short (less than 256 bit of length), it is feasible to factor N in reasonable time. The factorization results the prime numbers which had been used to calculate the parameters of the private key, and with these prime numbers the private key can be re-calculated. So you can impersonate the original key owner and read messages which are meant to be confidential for the original key owner.\n\nAttention: The factorization can take a long time (depending on the size of N and your hardware). With actual hardware you can factorize the parameter N with a bit length of approximately 64 bit in one hour (tested on a notebook with Intel Core i5 2.4Ghz and 8GB RAM).\n\nAs the security of RSA keys is assumed to be based on the length of the keys, a key length of more than 1024 bit is recommended for encryption.
Identity_90=Algorithm
Identity_91=Format
Identity_92=p
Identity_93=q
Identity_94=d
Identity_95=e
Identity_96=N
Identity_98=Algorithm
Identity_99=Format
IdentityManager_0=PLACEHOLDER
IdentityManager_1=create new key pair
IdentityManager_10=InvocationTargetException while generating a key pair
IdentityManager_11=\ (OID: 
IdentityManager_12=)
IdentityManager_13=\ 
IdentityManager_14=RSA
IdentityManager_15=\ - 
IdentityManager_16=Bit - 
IdentityManager_17=PublicKey - KeyID:
IdentityManager_18=\ - 
IdentityManager_19=Bit - 
IdentityManager_2=NoSuchAlgorithmException while generating a key pair
IdentityManager_20=\ KeyID: 
IdentityManager_22= cracked by: 
IdentityManager_23=\ - 
IdentityManager_24=Bit - 
IdentityManager_25=\ 
IdentityManager_26=\ - 
IdentityManager_27=Bit - 
IdentityManager_28=\ - keyID:
IdentityManager_3=InvalidAlgorithmParameterException while generating a key pair
IdentityManager_4=SecurityException while generating a key pair
IdentityManager_5=IllegalArgumentException while generating a key pair
IdentityManager_6=ClassNotFoundException while generating a key pair
IdentityManager_7=NoSuchMethodException while generating a key pair
IdentityManager_8=InstantiationException while generating a key pair
IdentityManager_9=IllegalAccessException while generating a key pair
