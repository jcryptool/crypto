EccMainView_ztabGeneralText=Fehlerkorrektur-Codes
EccMainView_ztabMcElieceText=McEliece-Kryptosystem
EccMainView_ztabHammingText=Algorithmus
GeneralEccView_btnNextStep=Weiter
GeneralEccView_btnPrev=Zurück
GeneralEccView_btnReset=Reset
GeneralEccView_grpErrorCode=Fehlerhafte Datenübertragung
GeneralEccView_grpReceiver=Empfänger
GeneralEccView_grpSenderStep=Absender
GeneralEccView_grpTextInfo=Informationen
GeneralEccView_lblHeader=Fehlerkorrektur-Code
GeneralEccView_lblTextDecoded=dekodieren
GeneralEccView_lblTextEncode=kodieren
GeneralEccView_lblTextOriginal=Original:
GeneralEccView_textHeader=Diese Visualisierung zeigt, wie einzelne Bit-Fehler bei der Datenübertragung über einen verrauschten Kanal mit einem Fehlerkorrektur-Code gefunden und korrigiert werden. Lineare Codes dieser Art können zur Verschlüsselung eingesetzt werden, beispielsweise mit dem McEliece- oder Niederreiter-Verfahren. Beides sind Kandidaten für Post Quantum Kryptografie.\nKlicken Sie auf "Weiter" um fortzufahren.
GeneralEccView_textInfo_step1=Der Eingabetext wird als ASCII-kodierter Bitset behandelt. 
GeneralEccView_textInfo_step2=Der Absender kodiert die Daten entsprechend des gewählten Schemas. In diesem Beispiel wurde ein Hamming-Code benutzt, der jeweils 4 Daten Bits mit 3 Bits zur Prüfung der Parität ergänzt.
GeneralEccView_textInfo_step3=Bei der Datenübertragung kommt es zu einem Fehler. Hier wurde in den Codewörtern jeweils ein Bit gekippt (rote Markierung).
GeneralEccView_textInfo_step4=Der Empfänger prüft auf Fehler, indem er das Fehler-Syndrom des jeweiligen Blocks errechnet, die bei einem einzelnen gekippten Bit auch der Position entsprechen. Die fehlerhaften Bits werden erkannt und die richtigen Codeworte wiederhergesetellt.
GeneralEccView_textInfo_step5=Am Ende wird die Zeichenkette dekodiert durch Extraktion der Daten-Bits.
HammingCryptoView_lblHeader=McEliece-Algorithmus mit Hamming-Code
HammingCryptoView_btnGeneratePrivateKey=Generieren
HammingCryptoView_grpInverseMatrices=Inverse Matrizen zur Entschlüsselung
HammingCryptoView_grpEncryption=Bob
HammingCryptoView_grpDecryption=Alice
HammingCryptoView_grpPrivateKey=Private Key
HammingCryptoView_grpPublicKey=Public Key
HammingCryptoView_grpTextInfo=Informationen
HammingCryptoView_lblEncrypt=Verschlüsselte Bits (Geheimtext)
HammingCryptoView_lblOutput=Entschlüsselte Bits
HammingCryptoView_lblTextOriginal=Klartext
HammingCryptoView_textHeader=Diese Ansicht stellt ein vereinfachtes McEliece-System mit Hamming-Kodierung dar. Es ist kryptografisch nicht sicher, da die Kodierung immer gleich und nur ein einzelner Fehler pro Segment korrigiert werden kann. Im Gegensatz dazu haben Goppa-Codes ein Zufallselement, da zur Generierung ein zufälliges Polynom in einem begrenzten Galois-Feld gewählt werden kann. Je nach Länge der Codeworte kann Goppa auch eine Vielzahl von Fehlern korrigieren. Die Arbeitsweise des zugrunde liegenden Algorithmus ist mit Hamming-Codes einfacher nachzuvollziehen.\nDie Nachricht und Schlüsselparameter können im ersten Schritt angepasst werden. Zum Fortfahren klicken Sie auf "Weiter".
HammingCryptoView_step1=Die Parameter können nun verändert werden. Alternativ klicken Sie auf "Generieren" um mit Zufallswerten zu füllen.
HammingCryptoView_step2=Bob führt die folgenden Schritte aus, um die Nachricht zu verschlüsseln:\n1. Bob enkodiert die Nachricht m als Binärstring der Länge n.\n2. Er berechnet c' durch Multiplikation von m mit dem Public Key G' = S*G*P\n3. Er generiert einen zufälligen Vektor e mit n Bits, welcher genau t Fehler enthält. Dies wird durch die Anzahl der Fehler, die der Code korrigieren kann, bestimmt (in diesem Beispiel 1).\n4. Der Geheimtext berechnet sich aus c = C' + e.
HammingCryptoView_step3=Bei Erhalt einer kodierten Nachricht entschlüsselt Alice diese wie folgt:\n1. Alice multipliziert den Geheimtext c' mit dem Inversen der Permutations-Matrix P.\n2. Sie nutzt den Dekodierungsalgorithmus um die Fehler in c' zu korrigieren.\n3. Sie stellt die ursprüngliche Nachricht wieder her, indem sie m' mit dem Inversen von S multipliziert.
McElieceView_lblHeader=McEliece-Kryptosystem
McElieceView_textHeader=Das McEliece-Kryptosystem ist ein asymmetrischer Verschlüsselungs-Algorithmus, der auf linearen Fehlerkorrektur-Codes aufbaut. Es wurde 1978 von Robert McEliece entwickelt und fand zunächst wegen seiner Nachteile gegenüber RSA kaum Beachtung. Erst durch die Anforderungen der "Post Quantum Cryptography" wurde es als Kandidat für die NIST-Standardisierung angemeldet. Die kryptografische Sicherheit des Algorithmus beruht auf der Schwierigkeit, einen generellen linearen Code zu dekodieren.\nSie können die Schlüsselparameter m und t selbst bestimmen. Durch einen Klick auf "Schlüsselpaar generieren" wird ein entsprechender Schlüssel erzeugt. Mit dem Schlüssel lassen sich Klartexte verschlüsseln und Geheimtexte entschlüsseln.
McElieceView_errorParamsTitle=Fehlerhafte Schlüsselparameter\!
McElieceView_errorCipher=Der Geheimtext ist ungültig\!
McElieceView_errorEncryptionFailedTitle=Verschlüsselung fehlgeschlagen
McElieceView_errorEncryptionFailed=Die Verschlüsselung konnte nicht durchgeführt werden. Es wurde kein Schlüsselpaar zur Verschlüsselung erstellt.\n\nUm ein Schlüsselpaar zu erstellen, wählen Sie die Schlüsselparameter m und t und klicken sie auf "Schlüsselpaar generieren".
McElieceView_errorDecryptionFailedTitle=Entschlüsselung fehlgeschlagen
McElieceView_errorDecryptionFailed=Die Entschlüsselung konnte nicht durchgeführt werden. Es wurde kein Schlüsselpaar zur Verschlüsselung erstellt.\n\nUm ein Schlüsselpaar zu erstellen, wählen Sie die Schlüsselparameter m und t und klicken sie auf "Schlüsselpaar generieren".
McElieceView_errorNoParametersSelectedTitle=Schlüsselerzeugung abgebrochen
McElieceView_errorNoParametersSelected=Die zur Schlüsselerzeugung notwendigen Parameter m und t wurden nicht gesetzt. Setzen Sie die Werte und drücken Sie erneut auf "Schlüssel erzeugen".
McElieceView_btnDecrypt=Entschlüsseln
McElieceView_btnEncrypt=Verschlüsseln
McElieceView_btnFillKey=Schlüsselpaar\ngenerieren
McElieceView_grpAlgorithmInfo=Algorithmus-Parameter
McElieceView_grpInput=Klartext
McElieceView_grpKeyParams=Schlüsselparameter
McElieceView_grpOutput=Geheimtext (hex)
McElieceView_lblHeader=McEliece Public Key cryptosystem (McEliecePKCS)
McElieceView_lblPublicKey=Public Key Länge: 
McElieceView_filename=de.txt
