EccMainView_ztabGeneralText=Error Correcting Codes
EccMainView_ztabMcElieceText=McEliece Cryptosystem
EccMainView_ztabHammingText=Algorithm
GeneralEccView_btnNextStep=Next step
GeneralEccView_btnPrev=Previous step
GeneralEccView_btnReset=Reset
GeneralEccView_grpErrorCode=Erroneous data transmission
GeneralEccView_grpReceiver=Receiver
GeneralEccView_grpSenderStep=Sender
GeneralEccView_grpTextInfo=Information
GeneralEccView_lblHeader=Error Correcting Codes
GeneralEccView_lblTextDecoded=Decode
GeneralEccView_lblTextEncode=Encode
GeneralEccView_lblTextOriginal=Original:
GeneralEccView_textHeader=This visual shows the general process of finding and correcting bit errors in data transmissions over a noisy channel using error-correcting codes. With larger linear codes like binary Goppa code ECC is used in the McEliece and Niederreiter crypto schemes to scramble a message (see McEliece tab).\n\nBelow you can enter a message and click on the "Next step" button to continue.
GeneralEccView_textInfo_step1=The input text is handled as an ASCII encoded bit set. 
GeneralEccView_textInfo_step2=The sender encodes the data according to the selected coding scheme. In this example Hamming code was used, which adds 3 parity check bits to every 4 bits of data. 
GeneralEccView_textInfo_step3=An error gets introduced in the data transmission. Here a single bit in each codeword is flipped (marked in red).
GeneralEccView_textInfo_step4=The receiving end checks for errors by calculating the error syndrome, which also identifies the position of the bit in error. The erroneous bits are detected and flipped to reproduce the correct codewords.
GeneralEccView_textInfo_step5=Lastly the string is decoded by extracting the data bits.
HammingCryptoView_lblHeader=McEliece Algorithm Using Hamming Code
HammingCryptoView_btnGeneratePrivateKey=Generate Key
HammingCryptoView_grpInverseMatrices=Inverse matrices for decryption
HammingCryptoView_grpEncryption=Bob
HammingCryptoView_grpDecryption=Alice
HammingCryptoView_grpPrivateKey=Private key
HammingCryptoView_grpPublicKey=Public key
HammingCryptoView_grpTextInfo=Information
HammingCryptoView_lblEncrypt=Encrypted bitstring (ciphertext)
HammingCryptoView_lblOutput=Decrypted bitstring
HammingCryptoView_lblTextOriginal=Plaintext
HammingCryptoView_textHeader=This view shows a simplified McEliece cryptosystem with Hamming code. This is not secure due to the static codewords and only one correctable error per segment. In comparison Goppa code has randomness due to the nature of irreducible polynomal over a finite field and can correct multiple errors depending on the codeword length. On the other hand, the function of the algorithm can be easier understood with smaller matrices. Therefore we choose this approach to visualize the McEliece system.\n\nThe message and key parameters can be adjusted in the first step. To continue, click on "Next Step".
HammingCryptoView_step1=Enter key parameters or let the application fill in random values by clicking on "generate".
HammingCryptoView_step2=To encrypt the message, Bob performs the following steps:\n1. Bob encodes the message m as a binary string of length n. 2. Bob computes the vector c' by multiplieing m with the public key G' = S*G*P\n3. Bob generates a random n-bit vector e containing exactly t errors, which is determined by the number of errors the code can correct (1 in this example).\n4. Bob computes the ciphertext as c = C' + e.
HammingCryptoView_step3=Upon receiving an encrypted message, Alice deciphers it by following these steps:\n1. Alice multiplies the ciphertext c' with the inverse of the permutation matrix P.\n2. Alice uses the decoding algorithm to correct the errors in c'.\n3. Alice recovers the original message by multiplying m' with the inverse of S.
McElieceView_errorParamsTitle=Errorneous key parameters\!
McElieceView_errorParams=Could not init system with given parameters. Try selecting a smaller error t or greater exponent m.
McElieceView_errorCipher=The entered ciphertext is invalid.
McElieceView_errorEncryptionFailedTitle=Encryption failed
McElieceView_errorEncryptionFailed=Encryption could not be performed. No encryption key pair was created.\n\nTo create a key pair, select the key parameters m and t and click on "Generate key pair".
McElieceView_errorDecryptionFailedTitle=Decryption failed
McElieceView_errorDecryptionFailed=Decryption could not be performed. No encryption key pair was created.\n\nTo create a key pair, select the key parameters m and t and click on "Generate key pair".
McElieceView_errorNoParametersSelectedTitle=Key generation cancelled
McElieceView_errorNoParametersSelected=The parameters m and t necessary for key generation have not been set. Set the values and press "Generate key" again.
McElieceView_btnDecrypt=Decrypt
McElieceView_btnEncrypt=Encrypt
McElieceView_btnFillKey=Generate\nkeys
McElieceView_grpAlgorithmInfo=Algorithm parameters
McElieceView_grpInput=Plaintext
McElieceView_grpKeyParams=Key parameters
McElieceView_grpOutput=Ciphertext (hexadecimal)
McElieceView_lblHeader=McEliece public key cryptosystem (McEliecePKCS)
McElieceView_lblPublicKey=Public key size: 
McElieceView_textHeader=The McEliece cryptosystem is an asymmetric encryption algorithm that uses linear error-correcting codes. Robert McEliece developed the original proposal in 1978 but it was not considered for mainstream cryptography until it was proposed as a candidate for the NIST "post-quantum cryptography standardization". The algorithms' security is based on the hardness of decoding a general linear code.\n\nYou can determine the key parameters m and t yourself. Click on "Generate key pair" to generate a corresponding key. The key can be used to encrypt plain texts and decrypt cipher texts.
McElieceView_filename=en.txt
