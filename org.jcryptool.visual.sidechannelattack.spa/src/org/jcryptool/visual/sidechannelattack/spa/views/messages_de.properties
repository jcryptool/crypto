Constants_1 = Ergebnis:
Constants_10 = Modus:
Constants_100 = Eingabe:
Constants_101 =
Constants_103 = S{0} = 
Constants_104 =. das h\u00f6chste Bit =
Constants_105 = Endergebnis: 
Constants_106 = Input: R\u2081 = 1
Constants_108 = S\u1d62 = R\u1d62\u00b2 mod n
Constants_109 = R\u1d62\u208a\u2081 = S\u1d62 * c mod n, wenn das h\u00f6chste Bit = 1
Constants_111 = R{0} = 
Constants_112 =\u00b2 mod
Constants_114 = Simple Power Analysis gegen RSA
Constants_115 = Chiffretext c =
Constants_116 = Priv. Schl\u00fcssel d =
Constants_117 = Q =
Constants_118 = P =
Constants_119 = Round Counter (links nach rechts)
Constants_12 = Ergebnis nach dem Quadrieren
Constants_120 = Ergebnis nach dem Multiplizieren
Constants_123 = Process:
Constants_124 = Output:
Constants_125 = Dieses Plug-in zeigt eine "Simple Power Analysis"-Attacke gegen die RSA-Verschl\u00fcsselung.\n"Square and Multiply"-Modus: Jede Ziffer des privaten Schl\u00fcssels d in Bin\u00e4rdarstellung wird einzeln betrachtet. Wenn die aktuelle Ziffer eine 0 ist, wird der Chiffretext quadriert. Ist die aktuelle Ziffer eine 1, wird der Chiffretext erst quadriert und dann multipliziert. In den Power Traces lassen sich die Unterschiede zwischen diesen Berechnungen erkennen. Der private Schl\u00fcssel l\u00e4sst sich direkt aus den Power Traces auslesen.\n\nHat ein Angreifer die M\u00f6glichkeit den Stromverbrauch w\u00e4hrend dieser sicherheitskritischen Berechnung aufzuzeichnen, kann er \u00fcber die Power Traces den privaten Schl\u00fcssel rekonstruieren. Dieser Angriff ist unabh\u00e4ngig von der verwendeten Schl\u00fcssell\u00e4nge.
Constants_126 = Ausf\u00fchren
Constants_127 = Zur\u00fccksetzen
Constants_128 = Modulus n =
Constants_131 = R\u1d62\u208a\u2081 = S\u1d62, wenn das h\u00f6chste Bit = 0
Constants_132 = Dieses Plug-in zeigt eine Simple Power Analysis Attacke gegen die RSA-Verschl\u00fcsselung.\n"Square and Multiply Always"-Modus: Der Square and Multiply Algorithmus wird erweitert. Auch wenn nur eine Quadrierung n\u00f6tig ist, wird trotzdem eine Multiplikation als Dummy-Operation durchgef\u00fchrt. Auf diese Weise l\u00e4sst sich an den Power Traces der private Schl\u00fcssel nicht mehr ablesen, da sowohl eine 0 als auch eine 1 den gleichen Stromverbrauch erzeugen. Hierdurch lassen sich die Schw\u00e4chen gegen\u00fcber einer SPA-Attacke vermeiden. Es lassen sich nicht immer schl\u00fcsselabh\u00e4ngige Operationen vermeiden, aber in den Power Traces auff\u00e4llige Operationen wie Multiplikationen lassen sich wie in diesem Beispiel gezeigt mit Dummy-Operationen verschleiern. Schutzmechanismen gegen SPA lassen sich sowohl in Software als auch in Hardware implementieren. Softwareimplementierungen sind unabh\u00e4ngig von der zugrunde liegenden Architektur, bieten allerdings auch nicht den gleichen Schutz wie Hardwareimplementierungen.
Constants_134 = w\u00e4hlen Sie eine Nummer als privaten Schl\u00fcssel d hier
Constants_135 = geben eine ganze Zahl im Feld [-2 ^ 31, 2 ^ 31-1] als Schl\u00fcsseltext
Constants_136 = Klicken Sie auf diese Taste, um Eingangs-Frames und linken Tabelle zu l\u00f6schen.
Constants_137 = c\u1d48 (mod n) =
Constants_138 = das Ergebnis R des entschl\u00fcsselten Klartexts
Constants_139 = bestimmen die Primzahl Q hier
Constants_14 = bestimmen die Primzahl P hier
Constants_140 = der Modulus n = P*Q.
Constants_141 = Square and Multiply
Constants_142 = Square and Multiply Always
Constants_143 = Parameter:
Constants_144 = privater Schl\u00fcssel d (bin\u00e4r)
Constants_145 = R\u1d62\u208a\u2081 = S\u1d62 * c mod n
Constants_146 =
Constants_147 =
Constants_148 =
Constants_149 =
Constants_15 =
Constants_16 =
Constants_17 =
Constants_18 =
Constants_19 =
Constants_2 =
Constants_20 =
Constants_21 =
Constants_22 =
Constants_23 =
Constants_24 =
Constants_25 =
Constants_26 =
Constants_27 =
Constants_28 =
Constants_29 =
Constants_3 =
Constants_30 =
Constants_31 =
Constants_32 =
Constants_33 =
Constants_34 =
Constants_35 =
Constants_36 =
Constants_37 =
Constants_38 =
Constants_39 =
Constants_4 =
Constants_40 =
Constants_41 =
Constants_42 =
Constants_43 =
Constants_44 =
Constants_45 =
Constants_46 =
Constants_47 =
Constants_48 =
Constants_49 =
Constants_5 =
Constants_50 =
Constants_51 =
Constants_52 =
Constants_53 =
Constants_54 =
Constants_55 =
Constants_56 =
Constants_57 =
Constants_58 =
Constants_59 =
Constants_6 =
Constants_60 =
Constants_61 =
Constants_62 =
Constants_63 =
Constants_64 =
Constants_65 =
Constants_66 =
Constants_67 =
Constants_68 =
Constants_69 =
Constants_7 =
Constants_70 =
Constants_71 =
Constants_72 =
Constants_73 =
Constants_74 =
Constants_75 =
Constants_76 =
Constants_77 =
Constants_78 =
Constants_79 =
Constants_8 =
Constants_80 =
Constants_81 =
Constants_82 =
Constants_83 =
Constants_84 =
Constants_85 =
Constants_86 =
Constants_87 =
Constants_88 =
Constants_89 =
Constants_9 =
Constants_90 =
Constants_91 =
Constants_92 =
Constants_93 =
Constants_94 =
Constants_95 =
Constants_96 =
Constants_97 =
Constants_98 =
Constants_99 =
SPAView_description=Bei der Simple Power Analysis (SPA) wird der Energieverbrauch des Verschlüsselungsprozessors w\u00e4hrend der Verschl\u00fcsselung aufgezeichnet. Da sich der Energieverbrauch des Mikroprozessors in Abh\u00e4ngigkeit von seiner Rechenleistung \u00e4ndert, k\u00f6nnen aus dem Energieverbrauch, dessen zeitlichen Ablauf und dem daraus entstehenden Muster R\u00fcckschl\u00fcsse auf das Verschl\u00fcsselungsverfahren und den Geheimschl\u00fcssel gezogen werden.


